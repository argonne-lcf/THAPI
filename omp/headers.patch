diff -u4 -r include/omp-tools.h modified_include/omp-tools.h
--- include/omp-tools.h	2022-04-07 21:46:21.855636000 +0000
+++ modified_include/omp-tools.h	2022-05-03 18:57:18.099250000 +0000
@@ -163,8 +163,10 @@
   ompt_native_overhead = 0x40,
   ompt_native_idleness = 0x80
 } ompt_native_mon_flag_t;
 
+typedef int ompt_native_mon_flags_t;
+
 typedef enum ompt_task_flag_t {
   ompt_task_initial = 0x00000001,
   ompt_task_implicit = 0x00000002,
   ompt_task_explicit = 0x00000004,
@@ -176,8 +178,10 @@
   ompt_task_mergeable = 0x40000000,
   ompt_task_merged = 0x80000000
 } ompt_task_flag_t;
 
+typedef int ompt_task_flags_t;
+
 typedef enum ompt_task_status_t {
   ompt_task_complete = 1,
   ompt_task_yield = 2,
   ompt_task_cancel = 3,
@@ -206,8 +210,10 @@
   ompt_parallel_league = 0x40000000,
   ompt_parallel_team = 0x80000000
 } ompt_parallel_flag_t;
 
+typedef int ompt_parallel_flags_t;
+
 typedef enum ompt_target_map_flag_t {
   ompt_target_map_flag_to = 0x01,
   ompt_target_map_flag_from = 0x02,
   ompt_target_map_flag_alloc = 0x04,
@@ -219,8 +225,10 @@
   ompt_target_map_flag_close = 0x100,
   ompt_target_map_flag_shared = 0x200
 } ompt_target_map_flag_t;
 
+typedef unsigned int ompt_target_map_flags_t;
+
 typedef enum ompt_dependence_type_t {
   ompt_dependence_type_in = 1,
   ompt_dependence_type_out = 2,
   ompt_dependence_type_inout = 3,
@@ -244,8 +252,10 @@
   ompt_cancel_detected = 0x20,
   ompt_cancel_discarded_task = 0x40
 } ompt_cancel_flag_t;
 
+typedef int ompt_cancel_flags_t;
+
 typedef uint64_t ompt_hwid_t;
 
 typedef enum ompt_state_t {
   ompt_state_work_serial = 0x000,
@@ -285,8 +295,10 @@
   ompt_frame_framepointer = 0x20,
   ompt_frame_stackaddress = 0x30
 } ompt_frame_flag_t;
 
+typedef int ompt_frame_flags_t;
+
 typedef uint64_t ompt_wait_id_t;
 
 typedef uint64_t (*ompt_get_unique_id_t)(void);
 
@@ -341,10 +353,10 @@
 
 typedef struct ompt_frame_t {
   ompt_data_t exit_frame;
   ompt_data_t enter_frame;
-  int exit_frame_flags;
-  int enter_frame_flags;
+  ompt_frame_flags_t exit_frame_flags;
+  ompt_frame_flags_t enter_frame_flags;
 } ompt_frame_t;
 
 typedef void (*ompt_callback_t)(void);
 
@@ -424,9 +436,9 @@
 typedef int (*ompt_get_parallel_info_t)(int ancestor_level,
                                         ompt_data_t **parallel_data,
                                         int *team_size);
 
-typedef int (*ompt_get_task_info_t)(int ancestor_level, int *flags,
+typedef int (*ompt_get_task_info_t)(int ancestor_level, ompt_task_flags_t *flags,
                                     ompt_data_t **task_data,
                                     ompt_frame_t **task_frame,
                                     ompt_data_t **parallel_data,
                                     int *thread_num);
@@ -452,9 +464,9 @@
                                                    unsigned int enable,
                                                    unsigned int etype);
 
 typedef ompt_set_result_t (*ompt_set_trace_native_t)(ompt_device_t *device,
-                                                     int enable, int flags);
+                                                     int enable, ompt_native_mon_flags_t flags);
 
 typedef int (*ompt_start_trace_t)(ompt_device_t *device,
                                   ompt_callback_buffer_request_t request,
                                   ompt_callback_buffer_complete_t complete);
@@ -491,26 +503,26 @@
 
 typedef void (*ompt_callback_parallel_begin_t)(
     ompt_data_t *encountering_task_data,
     const ompt_frame_t *encountering_task_frame, ompt_data_t *parallel_data,
-    unsigned int requested_parallelism, int flags, const void *codeptr_ra);
+    unsigned int requested_parallelism, ompt_parallel_flags_t flags, const void *codeptr_ra);
 
 typedef struct ompt_record_parallel_begin_t {
   ompt_id_t encountering_task_id;
   ompt_id_t parallel_id;
   unsigned int requested_parallelism;
-  int flags;
+  ompt_parallel_flags_t flags;
   const void *codeptr_ra;
 } ompt_record_parallel_begin_t;
 
 typedef void (*ompt_callback_parallel_end_t)(
-    ompt_data_t *parallel_data, ompt_data_t *encountering_task_data, int flags,
+    ompt_data_t *parallel_data, ompt_data_t *encountering_task_data, ompt_parallel_flags_t flags,
     const void *codeptr_ra);
 
 typedef struct ompt_record_parallel_end_t {
   ompt_id_t parallel_id;
   ompt_id_t encountering_task_id;
-  int flags;
+  ompt_parallel_flags_t flags;
   const void *codeptr_ra;
 } ompt_record_parallel_end_t;
 
 typedef void (*ompt_callback_work_t)(ompt_work_t work_type,
@@ -542,14 +554,14 @@
 
 typedef void (*ompt_callback_task_create_t)(
     ompt_data_t *encountering_task_data,
     const ompt_frame_t *encountering_task_frame, ompt_data_t *new_task_data,
-    int flags, int has_dependences, const void *codeptr_ra);
+    ompt_task_flags_t flags, int has_dependences, const void *codeptr_ra);
 
 typedef struct ompt_record_task_create_t {
   ompt_id_t encountering_task_id;
   ompt_id_t new_task_id;
-  int flags;
+  ompt_task_flags_t flags;
   int has_dependences;
   const void *codeptr_ra;
 } ompt_record_task_create_t;
 
@@ -584,17 +596,17 @@
 typedef void (*ompt_callback_implicit_task_t)(ompt_scope_endpoint_t endpoint,
                                               ompt_data_t *parallel_data,
                                               ompt_data_t *task_data,
                                               unsigned int actual_parallelism,
-                                              unsigned int index, int flags);
+                                              unsigned int index, ompt_task_flags_t flags);
 
 typedef struct ompt_record_implicit_task_t {
   ompt_scope_endpoint_t endpoint;
   ompt_id_t parallel_id;
   ompt_id_t task_id;
   unsigned int actual_parallelism;
   unsigned int index;
-  int flags;
+  ompt_task_flags_t flags;
 } ompt_record_implicit_task_t;
 
 typedef void (*ompt_callback_masked_t)(ompt_scope_endpoint_t endpoint,
                                        ompt_data_t *parallel_data,
@@ -661,14 +673,14 @@
 typedef struct ompt_record_flush_t {
   const void *codeptr_ra;
 } ompt_record_flush_t;
 
-typedef void (*ompt_callback_cancel_t)(ompt_data_t *task_data, int flags,
+typedef void (*ompt_callback_cancel_t)(ompt_data_t *task_data, ompt_cancel_flags_t flags,
                                        const void *codeptr_ra);
 
 typedef struct ompt_record_cancel_t {
   ompt_id_t task_id;
-  int flags;
+  ompt_cancel_flags_t flags;
   const void *codeptr_ra;
 } ompt_record_cancel_t;
 
 typedef void (*ompt_callback_device_initialize_t)(int device_num,
@@ -688,8 +700,29 @@
 
 typedef void (*ompt_callback_device_unload_t)(int device_num,
                                               uint64_t module_id);
 
+typedef void (*ompt_callback_target_data_op_emi_t) (
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *target_task_data,
+  ompt_data_t *target_data,
+  ompt_id_t *host_op_id,
+  ompt_target_data_op_t optype,
+  void *src_addr,
+  int src_device_num,
+  void *dest_addr,
+  int dest_device_num,
+  size_t bytes,
+  const void *codeptr_ra
+);
+
+typedef void (*ompt_callback_target_data_op_intel_t)(
+    ompt_scope_endpoint_t endpoint, ompt_id_t target_id,
+    ompt_id_t host_op_id, ompt_target_data_op_t optype,
+    void *src_addr, int src_device_num,
+    void *dest_addr, int dest_device_num,
+    size_t bytes, const void *codeptr_ra);
+
 typedef void (*ompt_callback_target_data_op_t)(
     ompt_id_t target_id, ompt_id_t host_op_id, ompt_target_data_op_t optype,
     void *src_addr, int src_device_num, void *dest_addr, int dest_device_num,
     size_t bytes, const void *codeptr_ra);
@@ -705,8 +738,18 @@
   ompt_device_time_t end_time;
   const void *codeptr_ra;
 } ompt_record_target_data_op_t;
 
+typedef void (*ompt_callback_target_emi_t) (
+  ompt_target_t kind,
+  ompt_scope_endpoint_t endpoint,
+  int device_num,
+  ompt_data_t *task_data,
+  ompt_data_t *target_task_data,
+  ompt_data_t *target_data,
+  const void *codeptr_ra
+);
+
 typedef void (*ompt_callback_target_t)(ompt_target_t kind,
                                        ompt_scope_endpoint_t endpoint,
                                        int device_num, ompt_data_t *task_data,
                                        ompt_id_t target_id,
@@ -724,25 +767,33 @@
 typedef void (*ompt_callback_target_map_t)(ompt_id_t target_id,
                                            unsigned int nitems,
                                            void **host_addr, void **device_addr,
                                            size_t *bytes,
-                                           unsigned int *mapping_flags,
+                                           ompt_target_map_flags_t *mapping_flags,
                                            const void *codeptr_ra);
 
 typedef struct ompt_record_target_map_t {
   ompt_id_t target_id;
   unsigned int nitems;
   void **host_addr;
   void **device_addr;
   size_t *bytes;
-  unsigned int *mapping_flags;
+  ompt_target_map_flags_t *mapping_flags;
   const void *codeptr_ra;
 } ompt_record_target_map_t;
 
 typedef void (*ompt_callback_target_submit_t)(ompt_id_t target_id,
                                               ompt_id_t host_op_id,
                                               unsigned int requested_num_teams);
 
+typedef void (*ompt_callback_target_submit_intel_t) (
+    ompt_scope_endpoint_t endpoint,
+    ompt_id_t target_id,
+    ompt_id_t host_op_id,
+    unsigned int requested_num_teams
+);
+
+
 typedef struct ompt_record_target_kernel_t {
   ompt_id_t host_op_id;
   unsigned int requested_num_teams;
   unsigned int granted_num_teams;
@@ -798,11 +849,8 @@
 
 ompt_start_tool_result_t *ompt_start_tool(unsigned int omp_version,
                                           const char *runtime_version);
 
-ompd_rc_t ompd_initialize(ompd_word_t api_version,
-                          const ompd_callbacks_t *callbacks);
-
 ompd_rc_t ompd_get_api_version(ompd_word_t *version);
 
 ompd_rc_t ompd_get_version_string(const char **string);
 
@@ -980,8 +1028,11 @@
   ompd_callback_get_thread_context_for_thread_id_fn_t
       get_thread_context_for_thread_id;
 } ompd_callbacks_t;
 
+ompd_rc_t ompd_initialize(ompd_word_t api_version,
+                          const ompd_callbacks_t *callbacks);
+
 void ompd_bp_parallel_begin(void);
 
 void ompd_bp_parallel_end(void);
 
