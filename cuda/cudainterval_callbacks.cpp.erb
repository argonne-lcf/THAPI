#include <iomanip>
#include <iostream>
#include "babeltrace_cudainterval.h"
#include "cudainterval_callbacks.hpp"
#include "xprof_utils.hpp"
#include <babeltrace2/babeltrace.h>

#include <cuda.h.include>

#include <vector>
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <tuple>
#include <climits>
#include <set>

void *init_cudainterval_callbacks_state() {
    cudainterval_callbacks_state *s = new cudainterval_callbacks_state;
    return (void*) s;
}

static void create_and_enqueue_host_message(const char* hostname, const process_id_t process_id, const thread_id_t thread_id, const char* name,
                                            const uint64_t ts, const uint64_t duration, const bool err) {

     // Message creation
     bt_message *message = create_host_message(hostname, process_id, thread_id, name, ts, duration, err,
                            cudainterval_iter_g->dispatch->host_event_class,
                            cudainterval_self_message_iterator_g,
                            cudainterval_iter_g->dispatch->stream, BACKEND_CUDA);

     cudainterval_callbacks_state* state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;
     state->downstream_message_queue.push(message);
}

void create_and_enqueue_device_message(const char* hostname, const process_id_t process_id, const thread_id_t thread_id,
                                       const thapi_device_id device_id, const thapi_device_id subdevice_id,
                                       const char* name, const uint64_t ts, const uint64_t duration, const bool err) {

     // Message creation
     bt_message *message = create_device_message(hostname, process_id, thread_id, device_id, subdevice_id, name, ts, duration, err, "",
                            cudainterval_iter_g->dispatch->device_event_class,
                            cudainterval_self_message_iterator_g,
                            cudainterval_iter_g->dispatch->stream);


     // Set message
     cudainterval_callbacks_state* state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;
     state->downstream_message_queue.push(message);
}

static void create_and_enqueue_traffic_message(const char* hostname, const process_id_t process_id, const thread_id_t thread_id, const char* name,
                                               const uint64_t size) {

     // Message creation
     bt_message *message = create_traffic_message(hostname, process_id, thread_id, name, size,
                                                  cudainterval_iter_g->dispatch->traffic_event_class,
                                                  cudainterval_self_message_iterator_g,
                                                  cudainterval_iter_g->dispatch->stream, BACKEND_CUDA);

     cudainterval_callbacks_state* state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;
     state->downstream_message_queue.push(message);
}

<%#
  _                                         _                          _ ___
 | \  _       ._   _ _|_ ._ _   _. ._ _    / \      _       _     /\  |_) |
 |_/ (_) \/\/ | | _>  |_ | (/_ (_| | | |   \_X |_| (/_ |_| (/_   /--\ |  _|_

%>

bool cudainterval_downstream_message_queue_empty(struct cudainterval_message_iterator *interval_dispatch_iter)
{
    cudainterval_callbacks_state* state = (cudainterval_callbacks_state*) interval_dispatch_iter->callbacks_state;
    return state->downstream_message_queue.empty();
}

size_t cudainterval_downstream_message_queue_size(struct cudainterval_message_iterator *interval_dispatch_iter)
{
    cudainterval_callbacks_state* state = (cudainterval_callbacks_state*)  interval_dispatch_iter->callbacks_state;
    return state->downstream_message_queue.size();
}

const bt_message* cudainterval_downstream_message_queue_pop(struct cudainterval_message_iterator *interval_dispatch_iter)
{
    cudainterval_callbacks_state* state = (cudainterval_callbacks_state*) interval_dispatch_iter->callbacks_state;
    const bt_message* m = state->downstream_message_queue.front();
    state->downstream_message_queue.pop();
    return m;
}

void cudainterval_downstream_message_queue_push(struct cudainterval_message_iterator *interval_dispatch_iter, const bt_message *message)
{
    cudainterval_callbacks_state* state = (cudainterval_callbacks_state*) interval_dispatch_iter->callbacks_state;
    state->downstream_message_queue.push(message);
}

<%#
  _
 /   _. | | |_   _.  _ |   _
 \_ (_| | | |_) (_| (_ |< _>

%>

<% $dbt_events.each do | dbt_event | %>
static void cudainterval_<%= dbt_event.name %>_callback(
   <%= dbt_event.callback_signature %>
){
  <%#                             ___      _
       |   _   _  _. | o _|_       |  ._ _|_ _
       |_ (_) (_ (_| | |  |_ \/   _|_ | | | (_)
                             /
  %>
  <%if dbt_event.name_unsanitized.start_with?("lttng_ust_cuda:") %>
    const hostname_t   _hostname   = borrow_hostname(bt_evt);
    const process_id_t _process_id = borrow_process_id(bt_evt);
    const thread_id_t  _thread_id  = borrow_thread_id(bt_evt);
    cudainterval_callbacks_state* _state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;
  <%end %>

  <%#        _ ___
        /\  |_) |     _  _. | |  _
       /--\ |  _|_   (_ (_| | | _>
  %>
  <%if dbt_event.name_unsanitized.start_with?("lttng_ust_cuda:") %>
    int64_t _ns_from_origin;
    bt_clock_snapshot_get_ns_from_origin(bt_clock, &_ns_from_origin);
      <%if dbt_event.name_unsanitized.end_with?(START) %>
    _state->host_start[hpt_function_name_t(_hostname, _process_id, _thread_id, "<%= dbt_event.name_striped %>")] = _ns_from_origin;
      <%elsif dbt_event.name_unsanitized.end_with?(STOP) %>
    uint64_t &_start_g = _state->host_start.at(hpt_function_name_t(_hostname, _process_id, _thread_id, "<%= dbt_event.name_striped  %>"));
      <% if dbt_event.fields_name.include?('cuResult') %>
    create_and_enqueue_host_message(_hostname.c_str(), _process_id, _thread_id, "<%= dbt_event.name_striped %>", _start_g, _ns_from_origin-_start_g, cuResult);
      <% else %>
    create_and_enqueue_host_message(_hostname.c_str(), _process_id, _thread_id, "<%= dbt_event.name_striped %>", _start_g, _ns_from_origin-_start_g, 0);
      <% end %>
    _start_g = 0;
    <%end%>
  <%end%>

  <%#
       |\/|  _  ._ _   _  ._      _.  _  _  _   _  _  _   _
       |  | (/_ | | | (_) | \/   (_| (_ (_ (/_ _> _> (/_ _>
                            /
  %>
  <%# To do handle Alloc and cl_mem_host_ptr %>
  <%if dbt_event.name_striped.include?("Memcpy") and dbt_event.fields_name.include?("ByteCount") %>
    create_and_enqueue_traffic_message(_hostname.c_str(), _process_id, _thread_id, "<%= dbt_event.name_striped %>", ByteCount);
  <% end %>

  <%#
    _         _                    _                                   __          _
   |_) ._ _ _|_ o | o ._   _  o   | \  _     o  _  _     _. ._   _|   (_      |_  | \  _     o  _  _
   |   | (_) |  | | | | | (_| o   |_/ (/_ \/ | (_ (/_   (_| | | (_|   __) |_| |_) |_/ (/_ \/ | (_ (/_
                           _|
   Map [ Tuple [ Hostnane, process, stream ], device ]
  %>
  <% if dbt_event.name_unsanitized == "lttng_ust_cuda_properties:device" %>
    const hostname_t   _hostname   = borrow_hostname(bt_evt);
    const process_id_t _process_id = borrow_process_id(bt_evt);
    cudainterval_callbacks_state* _state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;
    _state->device_to_name[hp_device_t(_hostname, _process_id, device)] = std::string{name} ;
  <% end %>

  <%# TODO check error code. Create last_context and handle accordingly %> 
  <%# Handle / put an warning for legacy /cuCtxCreate/ who is per global %> 

  <% if dbt_event.name_unsanitized.end_with?(STOP) and dbt_event.name_unsanitized.match(/cuCtxCreate/) %>
    if (cuResult == CUDA_SUCCESS)
       _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].push(pctx_val);
  <% end %>

  <% if dbt_event.name_unsanitized.end_with?(START) and dbt_event.name_unsanitized.match(/cuCtxSetCurrent/) %>
    if (!_state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].empty())
       _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].pop();
    _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].push(ctx);
  <% elsif dbt_event.name_unsanitized.end_with?(START) and dbt_event.name_unsanitized.match(/cuCtxPushCurrent/) %>
    _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].push(ctx);
  <% elsif dbt_event.name_unsanitized.end_with?(START) and dbt_event.name_unsanitized.match(/cuCtxPopCurrent/) %>
    if (!_state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].empty())
      _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].pop();
  <% end %>

  <% if dbt_event.name_unsanitized.end_with?(STOP) and dbt_event.name_unsanitized.match(/cuStreamCreate/) %>
    _state->stream_to_context[hp_stream_t(_hostname,_process_id,phStream_val)] = _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].top();
  <%end%>

  <% if dbt_event.name_unsanitized.end_with?(START) and dbt_event.name_unsanitized.match(/cuDevicePrimaryCtxRetain/) %>
    _state->last_device[hpt_t(_hostname,_process_id,_thread_id)] = dev;
  <% elsif dbt_event.name_unsanitized.end_with?(STOP) and dbt_event.name_unsanitized.match(/cuDevicePrimaryCtxRetain/) %>
    if (cuResult == CUDA_SUCCESS)
       _state->context_to_device[hp_context_t(_hostname,_process_id, pctx_val) ] = _state->last_device[hpt_t(_hostname,_process_id,_thread_id)];
  <% end %>

  <%#
    _         _                    _
   |_) ._ _ _|_ o | o ._   _  o   |_    ._   _ _|_ o  _  ._    ._   _. ._ _   _
   |   | (_) |  | | | | | (_| o   | |_| | | (_  |_ | (_) | |   | | (_| | | | (/_
                           _|
   Map [ Tuple [ Hostnane, process, thread, function_name], Tuple [ device, subdevice] ]
  %>
  <%# Save kernel name %>
  <% if dbt_event.name_unsanitized.end_with?(START) and dbt_event.name_unsanitized.match(/cuModuleGetFunction/) %>
    _state->last_kernel[hpt_t(_hostname,_process_id,_thread_id)] = std::string{name_val};
  <% elsif dbt_event.name_unsanitized.end_with?(STOP) and dbt_event.name_unsanitized.match(/cuModuleGetFunction/) %>
    _state->kernel_to_name[hp_kernel_t(_hostname,_process_id,hfunc_val)] = _state->last_kernel[hpt_t(_hostname,_process_id,_thread_id)];
  <% end %>

  <% if dbt_event.name_unsanitized.end_with?(START) and dbt_event.name_unsanitized.match(/cuMemcpy|cuMemset|cuLaunch|cuMemPrefetch/) %>
     <%if dbt_event.fields_name.include?('f') %>
    const thapi_function_name _name = _state->kernel_to_name[hp_kernel_t(_hostname,_process_id,f)];
     <% else %>
    constexpr char _name[] = "<%= dbt_event.name_striped %>";
     <% end %>
    _state->profiled_function_name_and_ts[hpt_t(_hostname,_process_id,_thread_id)] = fn_ts_t(_name,_ns_from_origin);

    <% if dbt_event.fields_name.include?('hStream') %>
    CUcontext _ctx = hStream ? _state->stream_to_context[hp_stream_t(_hostname,_process_id,hStream)] : _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].top();
    <% else %>
    CUcontext _ctx = _state->context_stack[hpt_t(_hostname,_process_id,_thread_id)].top();
    <% end %>
    CUdevice _device = _state->context_to_device[hp_context_t(_hostname,_process_id, _ctx) ];
    _state->function_name_to_d[hpt_function_name_t(_hostname,_process_id,_thread_id, _name)] = _device;
  <% end %>

  <%#
    _         _                    _                        ___
   |_) ._ _ _|_ o | o ._   _  o   |_ |  _. ._   _  _   _|    | o ._ _   _   _
   |   | (_) |  | | | | | (_| o   |_ | (_| |_) _> (/_ (_|    | | | | | (/_ _>
                           _|              |
   Map [ Tuple[hostname, process, device, subdevice, cl_function_name], elapsed_time ]
  %>
  <% if dbt_event.name_unsanitized == "lttng_ust_cuda_profiling:event_profiling" %>
    const hostname_t   _hostname   = borrow_hostname(bt_evt);
    const process_id_t _process_id = borrow_process_id(bt_evt);
    const thread_id_t  _thread_id  = borrow_thread_id(bt_evt);
    cudainterval_callbacks_state* _state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;

    const hp_event_t _hp_event{_hostname, _process_id, hStart, hStop};
    const auto [_function_name, _ts] = _state->profiled_function_name_and_ts[hpt_t(_hostname, _process_id, _thread_id)];
    if (!_state->event_to_function_name_and_ts.count(_hp_event)){
       _state->event_to_function_name_and_ts[_hp_event] = tfn_ts_t(_thread_id, _function_name, _ts);
    } else {
      const auto [_start, _delta] = _state->event_result_to_start_and_delta[_hp_event];
      const auto _device = _state->function_name_to_d[hpt_function_name_t(_hostname,_process_id,_thread_id, _function_name)];
      create_and_enqueue_device_message(_hostname.c_str(),_process_id,_thread_id,_device,_device,_function_name.c_str(), _start, _delta, _delta == 0 );
   }

  <% elsif dbt_event.name_unsanitized == "lttng_ust_cuda_profiling:event_profiling_results" %>
    const hostname_t _hostname    = borrow_hostname(bt_evt);
    const process_id_t _process_id = borrow_process_id(bt_evt);
    cudainterval_callbacks_state* _state = (cudainterval_callbacks_state*) cudainterval_iter_g->callbacks_state;

    const hp_event_t _hp_event{_hostname, _process_id, hStart, hStop};
    if (_state->event_to_function_name_and_ts.count(_hp_event)) {
      const auto [_thread_id, _function_name, _ts] = _state->event_to_function_name_and_ts[_hp_event];
      const auto _device = _state->function_name_to_d[hpt_function_name_t(_hostname, _process_id, _thread_id, _function_name)];

      const uint64_t _start = _ts;
      uint64_t _delta = uint64_t (milliseconds * 1E6);
      if (startStatus != CUDA_SUCCESS or stopStatus != CUDA_SUCCESS or status != CUDA_SUCCESS) {
          _delta = 0;
      }

      create_and_enqueue_device_message(_hostname.c_str(),_process_id, _thread_id, _device, _device, _function_name.c_str(), _start, _delta, _delta == 0 );

      _state->event_to_function_name_and_ts.erase(_hp_event);
    } else {
      const thread_id_t _thread_id = borrow_thread_id(bt_evt);
      const auto [_function_name, _ts] = _state->profiled_function_name_and_ts[hpt_t(_hostname, _process_id, _thread_id)];
      const auto _device = _state->function_name_to_d[hpt_function_name_t(_hostname, _process_id, _thread_id, _function_name)];

      const hp_device_t hp_device{_hostname, _process_id, _device};
      const uint64_t _start = _ts;
      uint64_t _delta = uint64_t (milliseconds * 1E6);
      if (startStatus != CUDA_SUCCESS or stopStatus != CUDA_SUCCESS or status != CUDA_SUCCESS) {
          _delta = 0;
      }
      _state->event_result_to_start_and_delta[_hp_event] = sd_t(_start, _delta);
      _state->event_to_function_name_and_ts[_hp_event] = tfn_ts_t(_thread_id, _function_name, _ts);
    }
  <% end %>

};
<% end %>

<%#
 ___
  |  ._  o _|_ o  _. | o _   _
 _|_ | | |  |_ | (_| | | /_ (/_

%>

void init_cudainterval_callbacks(struct cudainterval_dispatch *ze_dispatch) {
<% $dbt_events.each do | dbt_event| %>
    cudainterval_register_callback(ze_dispatch, "<%= dbt_event.name_unsanitized %>", (void *) &cudainterval_<%= dbt_event.name %>_callback);
<% end %>
}

void finalize_cudainterval_callbacks(cudainterval_message_iterator *interval_dispatch_iter) {
    cudainterval_callbacks_state* state = (cudainterval_callbacks_state*)  interval_dispatch_iter->callbacks_state;
    auto map = state->host_start;
    for (auto const &[function_name, ts] : map) {
        if (ts != 0) {
            const auto [hostname,process_id, thread_id, f ]  = function_name;
            std::cerr << "Warning: " << hostname
                      << " PID " << process_id
                      << " TID " << thread_id
                      << " " << f << " was called but never returned" << std::endl;
        }
    }
}
