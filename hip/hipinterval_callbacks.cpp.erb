#include <iomanip>
#include <iostream>
#include "babeltrace_hipinterval.h"
#include "hipinterval_callbacks.hpp"
#include "xprof_utils.hpp"
#include <babeltrace2/babeltrace.h>

#include <hip.h.include>

#include <vector>
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <tuple>
#include <climits>
#include <set>

void *init_hipinterval_callbacks_state() {
    hipinterval_callbacks_state *s = new hipinterval_callbacks_state;
    return (void*) s;
}

static void create_and_enqueue_host_message(const char* hostname, const process_id_t process_id, const thread_id_t thread_id, const char* name,
                                            const uint64_t ts, const uint64_t duration, const bool err) {

     // Message creation
     bt_message *message = create_host_message(hostname, process_id, thread_id, name, ts, duration, err,
                            hipinterval_iter_g->dispatch->host_event_class,
                            hipinterval_self_message_iterator_g,
                            hipinterval_iter_g->dispatch->stream);

     hipinterval_callbacks_state* state = (hipinterval_callbacks_state*) hipinterval_iter_g->callbacks_state;
     state->downstream_message_queue.push(message);
}

<%#
  _                                         _                          _ ___
 | \  _       ._   _ _|_ ._ _   _. ._ _    / \      _       _     /\  |_) |
 |_/ (_) \/\/ | | _>  |_ | (/_ (_| | | |   \_X |_| (/_ |_| (/_   /--\ |  _|_

%>

bool hipinterval_downstream_message_queue_empty(struct hipinterval_message_iterator *interval_dispatch_iter)
{
    hipinterval_callbacks_state* state = (hipinterval_callbacks_state*) interval_dispatch_iter->callbacks_state;
    return state->downstream_message_queue.empty();
}

size_t hipinterval_downstream_message_queue_size(struct hipinterval_message_iterator *interval_dispatch_iter)
{
    hipinterval_callbacks_state* state = (hipinterval_callbacks_state*)  interval_dispatch_iter->callbacks_state;
    return state->downstream_message_queue.size();
}

const bt_message* hipinterval_downstream_message_queue_pop(struct hipinterval_message_iterator *interval_dispatch_iter)
{
    hipinterval_callbacks_state* state = (hipinterval_callbacks_state*) interval_dispatch_iter->callbacks_state;
    const bt_message* m = state->downstream_message_queue.front();
    state->downstream_message_queue.pop();
    return m;
}

void hipinterval_downstream_message_queue_push(struct hipinterval_message_iterator *interval_dispatch_iter, const bt_message *message)
{
    hipinterval_callbacks_state* state = (hipinterval_callbacks_state*) interval_dispatch_iter->callbacks_state;
    state->downstream_message_queue.push(message);
}

<%#
  _
 /   _. | | |_   _.  _ |   _
 \_ (_| | | |_) (_| (_ |< _>

%>

<% $dbt_events.each do | dbt_event | %>
static void hipinterval_<%= dbt_event.name %>_callback(
   <%= dbt_event.callback_signature %>
){
  <%#                             ___      _
       |   _   _  _. | o _|_       |  ._ _|_ _
       |_ (_) (_ (_| | |  |_ \/   _|_ | | | (_)
                             /
  %>
  <%if dbt_event.name_unsanitized.start_with?("lttng_ust_hip:") %>
    const hostname_t   _hostname   = borrow_hostname(bt_evt);
    const process_id_t _process_id = borrow_process_id(bt_evt);
    const thread_id_t  _thread_id  = borrow_thread_id(bt_evt);
    hipinterval_callbacks_state* _state = (hipinterval_callbacks_state*) hipinterval_iter_g->callbacks_state;
  <%end %>

  <%#        _ ___
        /\  |_) |     _  _. | |  _
       /--\ |  _|_   (_ (_| | | _>
  %>
  <%if dbt_event.name_unsanitized.start_with?("lttng_ust_hip:") %>
    int64_t _ns_from_origin;
    bt_clock_snapshot_get_ns_from_origin(bt_clock, &_ns_from_origin);
      <%if dbt_event.name_unsanitized.end_with?(START) %>
    _state->host_start[hpt_function_name_t(_hostname, _process_id, _thread_id, "<%= dbt_event.name_striped %>")] = _ns_from_origin;
      <%elsif dbt_event.name_unsanitized.end_with?(STOP) %>
    uint64_t &_start_g = _state->host_start.at(hpt_function_name_t(_hostname, _process_id, _thread_id, "<%= dbt_event.name_striped  %>"));
      <% if dbt_event.fields_name.include?('hipResult') && dbt_event.fields_type['hipResult'] == 'hipError_t' %>
    create_and_enqueue_host_message(_hostname.c_str(), _process_id, _thread_id, "<%= dbt_event.name_striped %>", _start_g, _ns_from_origin-_start_g, hipResult);
      <% else %>
    create_and_enqueue_host_message(_hostname.c_str(), _process_id, _thread_id, "<%= dbt_event.name_striped %>", _start_g, _ns_from_origin-_start_g, 0);
      <% end %>
    _start_g = 0;
    <%end%>
  <%end%>

};
<% end %>

<%#
 ___
  |  ._  o _|_ o  _. | o _   _
 _|_ | | |  |_ | (_| | | /_ (/_

%>

void init_hipinterval_callbacks(struct hipinterval_dispatch *ze_dispatch) {
<% $dbt_events.each do | dbt_event| %>
    hipinterval_register_callback(ze_dispatch, "<%= dbt_event.name_unsanitized %>", (void *) &hipinterval_<%= dbt_event.name %>_callback);
<% end %>
}

void finalize_hipinterval_callbacks(hipinterval_message_iterator *interval_dispatch_iter) {
    hipinterval_callbacks_state* state = (hipinterval_callbacks_state*)  interval_dispatch_iter->callbacks_state;
    auto map = state->host_start;
    for (auto const &[function_name, ts] : map) {
        if (ts != 0) {
            const auto [hostname,process_id, thread_id, f ]  = function_name;
            std::cerr << "Warning: " << hostname
                      << " PID " << process_id
                      << " TID " << thread_id
                      << " " << f << " was called but never returned" << std::endl;
        }
    }
}
