#!/usr/bin/env bash
exec_prefix=@prefix@
libdir=@libdir@
bindir=@bindir@
pkglibdir=$libdir/@PACKAGE@

display_help() {
<% if languages.include?("opencl") and  languages.include?("ze")%>
    echo "$(basename $0): a tracer / summarizer of OpenCL and L0 calls"
<% elsif languages.include?("opencl") %>
    echo "$(basename $0): a tracer / summarizer of OpenCL calls"
<% elsif languages.include?("ze") %>
    echo "$(basename $0): a tracer / summarizer of L0 calls"
<% end %>
    echo "Usage:"
    echo " $(basename $0) -h | --help "
    echo " $(basename $0) [option]... <application> <application-arguments>"
    echo " $(basename $0) [option]... -r [<trace>]..."
    echo
    echo "  -h, --help         Show this screen"
    echo "  -e, --extended     Print information for each Hostname / Process / Thread / Device"
    echo "  -t, --trace        Display the trace"
    echo "  -a, --asm          Dump in your current directory low level kernels informations (asm,isa,visa,...)."
    echo "  -r, --replay       <application> <application-arguments> will be traited as pathes to traces folders ($HOME/lttng-traces/...)"
    echo "                     If no arguments are provided, will use the latest trace available"
    echo
    echo " Example:"
    echo " $(basename $0) ./a.out"
    echo
    echo "$(basename $0) will save the trace in $HOME/lttng-traces/"
    echo " Please tidy up from time to time"
    echo "                                                   __ "
    echo "For complain, praise, bug repport please use:    <(o )___"
    echo "   https://xgitlab.cels.anl.gov/heteroflow/tracer ( ._> /"
    echo "   or send email to {apl,bvideau}@anl.gov          \`---'"
    exit 1
}

# Find all location of a `.so`
whichlib() {
  # Output of ldconfig:
  #/usr/lib32:
  #       libstdc++.so.6 -> libstdc++.so.6.0.26
  # After the awk:
  # -> /usr/lib32/libstdc++.so.6

  # In OpenSUSE ldconfig, is in '/sbin'.
  PATH=$PATH:/sbin ldconfig -vNX $(echo $LD_LIBRARY_PATH | sed 's/:/ /g') 2>/dev/null |
  awk -v p=$1 'match($1, ":")                    { header=substr($1, 1, length($1)-1)} \
               match($1, "^lib") && match($1, p) { print header "/" $1}'
}

trace_and_summary() {
    if [ -z "$@" ]; then
        display_help
    fi

    mkdir -p ${LTTNG_HOME:-$HOME}
    lttng-sessiond $quiet --daemonize
<% if languages.include?("opencl") and  languages.include?("ze")%>
    lttng $quiet create iprof
<% elsif languages.include?("opencl") %>
    lttng $quiet create thapi-opencl-session
<% elsif languages.include?("ze") %>
    lttng $quiet create thapi-ze-session
<% end %>

    #Using blocking more to trace event record loss
    lttng $quiet enable-channel --userspace --blocking-timeout=inf blocking-channel

<% if languages.include?("opencl") %>
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl:*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_build:infos*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_profiling:*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_arguments:kernel_info
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_devices:*
<% end %>
<% if languages.include?("ze") %>
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze:*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_zet:*
    export LTTNG_UST_ZE_PROFILE=1
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze_profiling:*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze_properties:*
<% end %>

    lttng $quiet add-context --userspace --channel=blocking-channel -t vpid -t vtid

    #Preventing trace event record loss
<% if languages.include?("opencl") %>
    if [ -z "$LTTNG_UST_OPENCL_LIBOPENCL" ]
    then
      export LTTNG_UST_OPENCL_LIBOPENCL=$(whichlib libOpenCL.so | head -n 1)
    fi
<% end %>
<% if languages.include?("ze") %>
    if [ -z "$LTTNG_UST_ZE_LIBZE_LOADER" ]
    then
      export LTTNG_UST_ZE_LIBZE_LOADER=$(whichlib libze_loader.so | head -n 1)
    fi
<% end %>
    #Preventing trace event record loss
    export LTTNG_UST_ALLOW_BLOCKING=1
<% if languages.include?("opencl") %>
    export LD_PRELOAD=$libdir/libTracerOpenCL.so:$LD_PRELOAD
    export LD_LIBRARY_PATH=$pkglibdir/opencl:$LD_LIBRARY_PATH
<% end %>
<% if languages.include?("ze") %>
    export LD_PRELOAD=$libdir/libTracerZE.so:$LD_PRELOAD
    export LD_LIBRARY_PATH=$pkglibdir/ze:$LD_LIBRARY_PATH 
<% end %>

    lttng $quiet start
    trap 'trace_epilogue' EXIT SIGABRT SIGSEGV
    "$@"
}

trace_epilogue() {
  lttng $quiet stop
  lttng $quiet destroy
  summary
}


summary() {
    if [ -z "$@" ]; then
<% if languages.include?("opencl") and  languages.include?("ze")%>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/* | head -1)
<% elsif languages.include?("opencl") %>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/thapi-opencl-session* | head -1)
<% elsif languages.include?("ze") %>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/thapi-ze-session* | head -1)
<% end %>
        echo "Trace location:" $lttng_last_session
        echo
    else
        lttng_last_session=$@
    fi
    # Check that the argument are trace.
    # We don't quote the $lttng_last_session, to be able to loop over hit.
    # Should be cleaner to use bash arrays.
    for f in  $lttng_last_session; do
        if [ ! -d "$f" ]; then
            echo "$f is not a trace folder"
            exit 1
        fi
    done

    if [ -n "$trace" ]; then
        # Todo filter direcly in the babeltrace
<% if languages.include?("opencl") %>
        $bindir/babeltrace_opencl $lttng_last_session | grep lttng_ust_opencl
<% end %>
<% if languages.include?("ze") %>
        $bindir/babeltrace_ze $lttng_last_session | grep lttng_ust_ze
<% end %>
    fi

<% if languages.include?("opencl") %>
    ocl_output=$(babeltrace2 --plugin-path=$libdir --component=sink.clprof.dispatch  --params="display=$display" ${lttng_last_session})
    if [ -n "$ocl_output" ]; then
        echo "== OpenCL == "
        echo "$ocl_output"
    fi
<% end %>
<% if languages.include?("ze") %>
    ze_output=$(babeltrace2 --plugin-path=$libdir --component=sink.zeprof.dispatch  --params="display=$display" ${lttng_last_session})
    if [ -n "$ze_output" ]; then
        echo "== Level0 == "
        echo "$ze_output"
    fi
<% end %>
}

#  _
# |_) _. ._ _ o ._   _     /\  ._ _
# |  (_| | _> | | | (_|   /--\ | (_| \/
#                    _|           _|
display="compact";
if [[ $# -eq 0 ]]; then
    display_help
fi

while (( "$#" )); do
    case "$1" in
        -h | --help)     display_help; exit ;;
        -e | --extented) shift; display="extended"   ;;
        -r | --replay)   shift; replay=true ;;
        -d | --debug)    shift; debug=true ;;
        -a | --asm)      shift; asm=true ;;
        -t | --trace)    shift; trace=true ;;
        --)              shift; break ;;
        *)               break  ;;
    esac
done

if [ -n "$debug" ]; then
    export LIBBABELTRACE2_INIT_LOG_LEVEL=WARNING
    export BABELTRACE_CLI_LOG_LEVEL=WARNING
else
    quiet="--quiet"
fi

if [ -n "$asm" ]; then
    export IGC_ShaderDumpEnable=1
    export IGC_DumpToCurrentDir=1
fi

if [ -n "$replay" ]; then
    summary "$@"
else
    trace_and_summary "$@"
fi
