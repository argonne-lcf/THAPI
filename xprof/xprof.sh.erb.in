#!/usr/bin/env bash
set -euo pipefail

exec_prefix=@prefix@
libdir=@libdir@
bindir=@bindir@
pkglibdir=$libdir/@PACKAGE@
prefix=@prefix@
datarootdir=@datarootdir@
datadir=@datadir@

<%def print_loader_logic (language, library, libtracer)
env_var="LTTNG_UST_#{language.upcase}_#{library.upcase}"
directory=language.downcase
<<EOF
    set +u
    if [ -z "$#{env_var}" ]; then
        #{env_var}=$(whichlib64_head #{library}.so)
        if [ -n "$#{env_var}" ]; then
            export #{env_var}="$#{env_var}"
            export LD_LIBRARY_PATH=$pkglibdir/#{directory}:$LD_LIBRARY_PATH
        fi
    else
        export LD_LIBRARY_PATH=$pkglibdir/#{directory}:$LD_LIBRARY_PATH
    fi
    export LD_PRELOAD=$libdir/#{libtracer}.so:$LD_PRELOAD
    set -u
EOF
end%>

SHARED_LOCAL_FILESYSTEM=/dev/shm/.thapi_lock/${PALS_APID:-0}
SHARED_GLOBAL_FILESYSTEM=$HOME/.thapi_lock/${PALS_APID:-0}
THAPI_OUTPUT=${LTTNG_HOME:-$HOME}
export LTTNG_HOME=$HOME/.lttng_home/${PALS_APID:-0}/node-${PALS_NODEID:-0}

# Bash is so nice..: https://stackoverflow.com/a/38595828/7674852
lttngq() { lttng $quiet "$@" ; }
echoq() {
   if [ $debug == true ]; then
        echo "$@"
   fi
}

local_barier() {
    echoq "THAPI_LOG: local_barier_entry ($1): ${PALS_RANKID:-0}"
    local folder=$SHARED_LOCAL_FILESYSTEM/lock/$1
    local path=$folder/${PALS_LOCAL_RANKID:-0}
    mkdir -p $path
    while [ $(find $folder -mindepth 1 -maxdepth 1 -type d | wc -l) != ${PALS_LOCAL_SIZE:-1} ]; do
      sleep 0.2
    done
    # We cannot rmdir $path here, and I have no idea why...
    echoq "THAPI_LOG: local_barier_exit ($1): ${PALS_RANKID:-0}"
}

global_barrier_epilogue() {
    echoq "THAPI_LOG: global_barrier_epilogue_entry"
    rmdir $SHARED_GLOBAL_FILESYSTEM/${PALS_RANKID:-0}
    # Only master should wait, because after master will delete $SHARED_GLOBAL_FILESYSTEM
    if [[ ${PALS_RANKID:-0} == 0 ]]; then
        while [ $(stat -c %h $SHARED_GLOBAL_FILESYSTEM) != 2 ]; do
                sleep 0.2
        done
    fi
    echoq "THAPI_LOG: global_barrier_epilogue_exit"
}

run_iff_local_master() {
    if [[ ${PALS_LOCAL_RANKID:-0} == 0 ]]; then
        $@
    fi
}

<%# https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
Option names are typically one to three words long, with hyphens to separate words %>

display_help() {
<% if ["omp","ze","cuda","cl","hip"].all? { |l| languages.include?(l) } %>
    echo "$(basename $0): a tracer / summarizer of OpenCL, L0, CUDA, HIP, and OMPT driver calls"
<% elsif languages.include?("omp") %>
    echo "$(basename $0): a tracer / summarizer of OMP calls"
<% elsif languages.include?("cl") %>
    echo "$(basename $0): a tracer / summarizer of OpenCL calls"
<% elsif languages.include?("ze") %>
    echo "$(basename $0): a tracer / summarizer of L0 calls"
<% elsif languages.include?("cuda") %>
    echo "$(basename $0): a tracer / summarizer of CUDA calls"
<% elsif languages.include?("hip") %>
    echo "$(basename $0): a tracer / summarizer of HIP calls"
<% end %>
    echo "Usage:"
    echo " $(basename $0) -h | --help "
    echo " $(basename $0) [option]... <application> <application-arguments>"
    echo " $(basename $0) [option]... -r [<trace>]..."
    echo
    echo "  -h, --help                Show this screen"
    echo "  -k, --kernel-verbose      Report kernels execution time with SIMD width and global/local sizes"
    echo "  -e, --extended            Print information for each Hostname / Process / Thread / Device"
    echo "  -t, --trace               Display trace"
    echo "  -l, --timeline            Dump the timeline. Will create a `out.pftrace` file that can be opened in perfetto (https://ui.perfetto.dev/#!/viewer)"
    echo "  -j, --json                Summary will be printed as json"
    echo "  -m, --tracing-mode <mode> [minimal, default, full]"
    echo "  --asm                     Dump in your current directory low-level kernels information (asm, isa, visa, ...)"
    echo "  --no-save                 Data will be processed on-the-fly"
    echo "  --mangle                  Use mangled name"
    echo "  --metadata                Display metadata"
    echo "  --max-name-size <size>    Maximun size allowed for kernels names (default 80)"
    echo "  --traced-ranks <rank,...> Comma list separated of MPI rank to trace (default 0). You can use -1 to trace all ranks"
    echo "  --clean-up                Clean lttng daemon, and internal lock file"
    echo "  -v, --version             Print the version string"
    echo "  -r, --replay    [path]    <application> <application-arguments> will be treated as paths to traces folders ($HOME/lttng-traces/...)"
    echo "                            If no arguments are provided, will use the latest trace available"
    echo
    echo " Example:"
    echo " $(basename $0) ./a.out"
    echo
    echo "$(basename $0) will save the trace in $HOME/lttng-traces/"
    echo " Please tidy up from time to time"
    echo "                                                      __ "
    echo "For complaints, praises, or bug reports please use: <(o )___"
    echo "   https://github.com/argonne-lcf/THAPI              ( ._> /"
    echo "   or send email to {apl,bvideau}@anl.gov             \`---'"
    exit 1
}

display_version() {
    cat $datadir/version
    exit 1
}

# Find all location of a `.so`
whichlib() {
   {
    # Always remove `x` here, too much nose due to ldconfig -vNX
    set +x
    # Output of ldconfig:
    #/usr/lib32:
    #       libstdc++.so.6 -> libstdc++.so.6.0.26
    # After the awk:
    # -> /usr/lib32/libstdc++.so.6

    # In OpenSUSE ldconfig, is in '/sbin'.
    PATH=$PATH:/sbin ldconfig -vNX $(echo $LD_LIBRARY_PATH | sed 's/:/ /g') 2>/dev/null |
    awk -v p=$1 'match($1, ":")                    { header=substr($1, 1, length($1)-1)} \
                 match($1, "^lib") && match($1, p) { print header "/" $1}'
   }
}

whichlib64_head() {
    # This function return only the first lib found
    # This avoid a broken pipe error when the old pattern `whichlib64 $foo | head - n1` was used
  {
    unset IFS
    for lib in $(whichlib $1)
    do
        if objdump -a $lib | grep 64 > /dev/null; then
            echo $lib
            break
        fi
    done
  }
}

# > unset FOO ; thapi_export FOO 1 ; echo $FOO
# 1
# > export FOO=2 ; thapi_export FOO 1 ; echo $FOO
# 2
# > export FOO=0 ; thapi_export FOO 1 ; echo $FOO
#
thapi_export() {
    set +u
    if [ -z "${!1}" ]; then
        export "$1"="$2"
    elif [ "${!1}" = "0" ]; then
        unset "$1"
    fi
    set -u
}

cleanup() {
    echo "Cleaning up lttng daemons and tmp folders..."
    killall -9 --quiet lttng-sessiond lttng-consumerd lttng-relayd || true
    rm -rf -- "$SHARED_GLOBAL_FILESYSTEM"
    rm -rf -- "$SHARED_LOCAL_FILESYSTEM"
}

enable_events_omp() {
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_ompt:*target*
}

enable_events_cl() {
    opencl_disable_events="lttng_ust_opencl:clSetKernelArg*,lttng_ust_opencl:clGetKernelArg*,"
    opencl_disable_events+="lttng_ust_opencl:clSetKernelExecInfo*,lttng_ust_opencl:clGetKernelInfo*,"
    opencl_disable_events+="lttng_ust_opencl:clGetMemAllocInfoINTEL*"

    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_opencl:* -x $opencl_disable_events
    if [ $tracing_mode = "full" ]; then
        lttngq enable-event --channel=blocking-channel --userspace $opencl_disable_events
    fi
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_opencl_build:infos*
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_opencl_profiling:*
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_opencl_arguments:kernel_info
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_opencl_devices:*
}

enable_events_ze() {
    if [ $tracing_mode = "minimal" ]; then
        lttngq enable-event --channel=blocking-channel --userspace $(cat $datadir/babeltrace_zeprofiling_apis.txt)
        lttngq enable-event --channel=blocking-channel --userspace lttng_ust_ze_properties:device_timer
    else
        lttngq enable-event --channel=blocking-channel --userspace lttng_ust_ze_build:log*
        lttngq enable-event --channel=blocking-channel --userspace lttng_ust_ze_profiling:*
        # Wildcard using the * character are supported at the end of tracepoint names.
        #   https://lttng.org/man/1/lttng-enable-event/v2.8/#doc-_understanding_event_rule_conditions
        # Disable-event doesn't have wildcard sadly
        ze_disable_properties="lttng_ust_ze_properties:memory_info_properties,lttng_ust_ze_properties:memory_info_range"
        ze_disable_events="lttng_ust_ze:zeKernelSetArgumentValue*,lttng_ust_ze:ze*Get*Properties*,lttng_ust_ze:zeKernelGetName"
        ze_disable_querry="lttng_ust_ze:*QueryStatus,lttng_ust_ze:*ProcAddrTable*"
        ze_disable_loader="lttng_ust_ze:*Loader*"
        lttngq enable-event --channel=blocking-channel --userspace lttng_ust_ze_properties:* -x $ze_disable_properties
        lttngq enable-event --channel=blocking-channel --userspace lttng_ust_ze:* -x ${ze_disable_events},${ze_disable_querry},${ze_disable_loader}

        if [ $tracing_mode = "full" ]; then
            lttngq enable-event --channel=blocking-channel --userspace ${ze_disable_events},${ze_disable_querry},${ze_disable_loader}
        fi
    fi
}

enable_events_cuda() {
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_cuda:*
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_cuda_profiling:*
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_cuda_properties:*
}

enable_events_hip() {
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_hip:*
}

enable_events_metadata() {
    lttngq enable-event --channel=blocking-channel --userspace lttng_ust_thapi:*
}

setup_lttng() {
    # Create global lock
    mkdir -p $SHARED_GLOBAL_FILESYSTEM/${PALS_RANKID:-0}


    mkdir -p $LTTNG_HOME
    # Only local master call this
    lttng-sessiond $quiet --daemonize || true

    local suffix=""
    if [ ${1:-""} = "--live" ]; then
        suffix="_live"
    fi

<% if ["omp","ze","cuda","cl","hip"].all? { |l| languages.include?(l) } %>
    THAPI_LTTNG_O_ROOT=$THAPI_OUTPUT/lttng-traces/iprof${suffix}-${PALS_APID:-0}
<% elsif languages.include?("cl") %>
    THAPI_LTTNG_O_ROOT=$THAPI_OUTPUT/lttng-traces/thapi${suffix}-opencl-session-${PALS_APID:-0}
<% elsif languages.include?("ze") %>
    THAPI_LTTNG_O_ROOT=$THAPI_OUTPUT/lttng-traces/thapi${suffix}-ze-session-${PALS_APID:-0}
<% elsif languages.include?("cuda") %>
    THAPI_LTTNG_O_ROOT=$THAPI_OUTPUT/lttng-traces/thapi${suffix}-cuda-session-${PALS_APID:-0}
<% elsif languages.include?("hip") %>
    THAPI_LTTNG_O_ROOT=$THAPI_OUTPUT/lttng-traces/thapi${suffix}-hip-session-${PALS_APID:-0}
<% end %>
    THAPI_LTTNG_O=$THAPI_LTTNG_O_ROOT/${PALS_NODEID:-0}

    if [ ${1:-""} = "--live" ]; then
        lttngq create THAPI_${PALS_NODEID:-0} --live
    else
        lttngq create THAPI_${PALS_NODEID:-0} -o $THAPI_LTTNG_O
    fi

    #Preventing trace event record loss
    export LTTNG_UST_ALLOW_BLOCKING=1
    lttngq enable-channel --userspace --blocking-timeout=inf blocking-channel

<% if languages.include?("omp") %>
    enable_events_omp
<% end %>
<% if languages.include?("cl") %>
    enable_events_cl
<% end %>
<% if languages.include?("ze") %>
    enable_events_ze
<% end %>
<% if languages.include?("cuda") %>
    enable_events_cuda
<% end %>
<% if languages.include?("hip") %>
    enable_events_hip
<% end %>
    enable_events_metadata

    lttngq add-context --userspace --channel=blocking-channel -t vpid -t vtid
    lttngq start THAPI_${PALS_NODEID:-0}
}

preload_lib_tracers() {
    IFS=","
    if [[ "$traced_ranks" == "-1" ]] || [[ "$IFS$traced_ranks$IFS" =~ "$IFS${PALS_RANKID:-0}$IFS" ]]; then
<% if languages.include?("omp") %>
    thapi_export LTTNG_UST_OMP_INTEL 1
    thapi_export OMP_TOOL_LIBRARIES  $libdir/libTracerOMPT.so
<% end %>
<% if languages.include?("cl") %>
<%= print_loader_logic("cl","libOpenCL","libTracerOpenCL")%>
<% end %>
<% if languages.include?("ze") %>
    export LTTNG_UST_ZE_PROFILE=1
    thapi_export LTTNG_UST_ZE_PARANOID_DRIFT 1
<%= print_loader_logic("ze","libze_loader","libTracerZE")%>
<% end %>
<% if languages.include?("cuda") %>
    export LTTNG_UST_CUDA_PROFILE=1
<%= print_loader_logic("cuda","libcuda","libTracerCUDA")%>
<% end %>
<% if languages.include?("hip") %>
<%= print_loader_logic("hip","libamdhip64","libTracerHIP")%>
<% end %>
    fi
    unset IFS
}

local_master_epilogue() {
    lttngq stop THAPI_${PALS_NODEID:-0}
    lttngq destroy THAPI_${PALS_NODEID:-0}
    if [ ${1:-""} = "--live" ]; then
        wait $BT_PID # Set setub_babeltrace_live
    fi
    global_barrier_epilogue
    rm -rf -- "$SHARED_LOCAL_FILESYSTEM"
}


#    _
#   |_) _   _ _|_ __ ._ _   _  ._ _|_  _  ._
#   |  (_) _>  |_    | | | (_) |   |_ (/_ | |
#

trace_epilogue() {
    local_barier epilogue
    run_iff_local_master local_master_epilogue

    # All the trace have been saved. We can now do the move
    if [ ${PALS_RANKID:-0} == 0 ]; then
        rm -rf -- "$SHARED_GLOBAL_FILESYSTEM"
        local new_output=${THAPI_LTTNG_O_ROOT/${PALS_APID:-0}/$(date '+%Y%m%d-%H%M%S')}
        mv $THAPI_LTTNG_O_ROOT $new_output
        THAPI_LTTNG_O=$new_output
        summary
    fi
}

trace_and_summary() {
    [ "$#" -eq 0 ] && display_help

    # Each node will have their own lock
    # Need to change LLTNG HOME so each node have their own "lock"
    run_iff_local_master setup_lttng
    local_barier setup

    #Create the metadata.
    #read and dump `$LTTNG_UST_THAPI_METADATA` env
    run_iff_local_master $bindir/thapi_metadata
    # Run the binary
    trap 'trace_epilogue' EXIT SIGABRT SIGSEGV

    preload_lib_tracers
    "$@"
}

bt2_all() {
    # Note that the $@ are not quoted!
    if [ -n "${trace-}" ]; then
        $bindir/babeltrace_thapi --backend <%= languages %> -r -c $@
    fi

    if [ -n "${timeline-}" ]; then
        $bindir/babeltrace_thapi timeline --backend <%= languages %> $@
    fi

    if [ -z "${timeline-}" ] && [ -z "${trace-}" ]; then
        $bindir/babeltrace_thapi tally --backend <%= languages %> $bt_tally_argv -- $@
    fi
}

summary() {
    if [ -n "${THAPI_LTTNG_O-}" ]; then
        lttng_last_session=$THAPI_LTTNG_O
        >&2 echo "Trace location:" $lttng_last_session
        >&2 echo
    elif [ "$#" -eq 0 ]; then
<% if ["omp","ze","cuda","cl","hip"].all? { |l| languages.include?(l) } %>
        lttng_last_session=$(ls -dt $THAPI_OUTPUT/lttng-traces/iprof-* | head -1)
<% elsif languages.include?("cl") %>
        lttng_last_session=$(ls -dt $THAPI_OUTPUT/lttng-traces/thapi-opencl-session* | head -1)
<% elsif languages.include?("ze") %>
        lttng_last_session=$(ls -dt $THAPI_OUTPUT/lttng-traces/thapi-ze-session* | head -1)
<% elsif languages.include?("cuda") %>
        lttng_last_session=$(ls -dt $THAPI_OUTPUT/lttng-traces/thapi-cuda-session* | head -1)
<% elsif languages.include?("hip") %>
        lttng_last_session=$(ls -dt $THAPI_OUTPUT/lttng-traces/thapi-hip-session* | head -1)
<% end %>
        >&2 echo "Trace location:" $lttng_last_session
        >&2 echo
    else
        lttng_last_session=$@
    fi
    # Check that the argument are trace.
    # We don't quote the $lttng_last_session, to be able to loop over hit.
    # Should be cleaner to use bash arrays.
    for f in  $lttng_last_session; do
        if [ ! -d "$f" ]; then
            echo "$f is not a trace folder, cannot replay. Exiting..."
            exit 1
        fi
    done
    bt2_all "$lttng_last_session"
}

#
#  |  o     _
#  |_ | \/ (/_
#

setub_babeltrace_live() {
  mkdir -p $THAPI_LTTNG_O_ROOT
  babeltrace2 \
     --plugin-path=$libdir \
     --component=source.ctf.lttng-live \
     --params="inputs=[\"net://localhost/host/$(hostname)/THAPI_${PALS_NODEID:-0}\"],
             session-not-found-action=end" \
<% if languages.include?("ze") %>
     --component=filter.zeinterval.interval \
<% end %>
<% if languages.include?("cl") %>
     --component=filter.clinterval.interval \
<% end %>
<% if languages.include?("cuda") %>
    --component=filter.cudainterval.interval \
<% end %>
<% if languages.include?("hip") %>
     --component=filter.hipinterval.interval \
<% end %>
<% if languages.include?("omp") %>
     --component=filter.ompinterval.interval \
<% end %>
     --component=sink.btx_tally.tally \
     --params="display=compact, \
               name=demangle, \
               display_mode=human, \
               display_metadata=false, \
               display_name_max_size=80, \
               display_kernel_verbose=false" > $THAPI_LTTNG_O_ROOT/tally_$(hostname)_${PALS_NODEID:-0}.log &
   BT_PID=$!
}

trace_epilogue_live() {
    local_barier epilogue
    run_iff_local_master local_master_epilogue --live

    # All the trace have been saved. We can now do the move
    if [ ${PALS_RANKID:-0} == 0 ]; then
        rm -rf -- "$SHARED_GLOBAL_FILESYSTEM"
        local new_output=${THAPI_LTTNG_O_ROOT/${PALS_APID:-0}/$(date '+%Y%m%d-%H%M%S')}
        mv $THAPI_LTTNG_O_ROOT $new_output
        THAPI_LTTNG_O=$new_output

        # All the trace have been saved. We can now do the move
        for x in $(ls $THAPI_LTTNG_O/tally_*.log | sort -V); do
           echo $x
           cat $x
        done
    fi
}

trace_and_summary_live() {
    [ "$#" -eq 0 ] && display_help
    # Each node will have their own lock
    # Need to change LLTNG HOME so each node have their own "lock"
    run_iff_local_master setup_lttng --live
    run_iff_local_master setub_babeltrace_live
    local_barier setup
    #Create the metadata.
    #read and dump `$LTTNG_UST_THAPI_METADATA` env
    run_iff_local_master $bindir/thapi_metadata
    # Run the binary
    trap 'trace_epilogue_live' EXIT SIGABRT SIGSEGV
    preload_lib_tracers
    "$@"
}


#  _
# |_) _. ._ _ o ._   _     /\  ._ _
# |  (_| | _> | | | (_|   /--\ | (_| \/
#                    _|           _|
tracing_mode="default"
procesing_mode="save"

[ "$#" -eq 0 ] && display_help

debug=false
bt_tally_argv=""
traced_ranks=0
asm=false
replay=false
cleanup=false

while (( "$#" )); do
    case "$1" in
        -h | --help)            display_help; exit ;;
        -v | --version)         display_version; exit ;;
        -k | --kernel-verbose)  shift; bt_tally_argv+=" --display_kernel_verbose=true" ;;
        -e | --extented)        shift; bt_tally_argv+=" --display=extended" ;;
        -r | --replay)          shift; replay=true ;;
        -t | --trace)           shift; trace=true ;;
        -l | --timeline)        shift; timeline=true ;;
        -j | --json)            shift; bt_tally_argv+=" --display_mode=json" ;;
        -m | --tracing-mode)    shift; tracing_mode=$1; shift ;;
        --no-save)              shift; procesing_mode="on-the-fly" ;;
        --traced-ranks)         shift; traced_ranks=$1; shift ;;
        --asm)                  shift; asm=true ;;
        --metadata)             shift; bt_tally_argv+=" --display_metadata=true" ;;
        --max-name-size)        shift; bt_tally_argv+=" --display_name_max_size=$1"; shift ;;
        --mangle)               shift; bt_tally_argv+=" --mangling=mangle" ;;
        --clean-up)             shift; cleanup=true ;;
        --debug)                shift; debug=true ;;
        --)                     shift; break ;;
        *)                      break  ;;
    esac
done

quiet=""
if [ $debug = true ]; then
    PS4="RankID ${PALS_RANKID:-0}: "
    set -x
<% if languages.include?("ze") %>
    export LTTNG_UST_ZE_VERBOSE=1
<% end %>
<% if languages.include?("cl") %>
    export LTTNG_UST_OPENCL_VERBOSE=1
<% end %>
<% if languages.include?("cuda") %>
    export LTTNG_UST_CUDA_VERBOSE=1
<% end %>
<% if languages.include?("hip") %>
    export LTTNG_UST_HIP_VERBOSE=1
<% end %>
<% if languages.include?("omp") %>
    export LTTNG_UST_OMP_VERBOSE=1
<% end %>
    #export LTTNG_UST_DEBUG=y
    #export LIBBABELTRACE2_INIT_LOG_LEVEL=WARNING
    #export BABELTRACE_CLI_LOG_LEVEL=WARNING
else
    quiet="--quiet"
fi

if [ $cleanup = true ]; then
    cleanup
    exit
fi

if [ $asm = true ]; then
    export SYCL_CACHE_PERSISTENT=0
    #This is a workarround for the fact that `SYCL_CACHE_PERSISTENT` doesn't work yet.
    rm -rf "$USER"/libsycl_cache/.cache/

    export IGC_ShaderDumpEnable=1
    export IGC_DumpToCurrentDir=1
fi

if [ $replay = true ]; then
    summary "$@"
elif [ $procesing_mode = "save" ]; then
    trace_and_summary "$@"
else
    trace_and_summary_live "$@"
fi
