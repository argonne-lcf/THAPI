#!/usr/bin/env bash
exec_prefix=@prefix@
libdir=@libdir@
bindir=@bindir@
pkglibdir=$libdir/@PACKAGE@
prefix=@prefix@
datarootdir=@datarootdir@
datadir=@datadir@

<%def print_loader_logic (language, library, libtracer)
env_var="LTTNG_UST_#{language.upcase}_#{library.upcase}"
directory=language.downcase
<<EOF
    if [ -z "$#{env_var}" ]
    then
      #{env_var}=$(whichlib64_head #{library}.so)
      if [ -n "$#{env_var}" ]
      then
        export #{env_var}="$#{env_var}"
        export LD_LIBRARY_PATH=$pkglibdir/#{directory}:$LD_LIBRARY_PATH
      fi
    else
      export LD_LIBRARY_PATH=$pkglibdir/#{directory}:$LD_LIBRARY_PATH
    fi
    export LD_PRELOAD=$libdir/#{libtracer}.so:$LD_PRELOAD
EOF
end%>
<%# https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
Option names are typically one to three words long, with hyphens to separate words %>

display_help() {
<% if languages.include?("opencl") and languages.include?("ze") and  languages.include?("cuda") %>
    echo "$(basename $0): a tracer / summarizer of OpenCL, L0, and CUDA driver calls"
<% elsif languages.include?("opencl") %>
    echo "$(basename $0): a tracer / summarizer of OpenCL calls"
<% elsif languages.include?("ze") %>
    echo "$(basename $0): a tracer / summarizer of L0 calls"
<% elsif languages.include?("cuda") %>
    echo "$(basename $0): a tracer / summarizer of CUDA calls"
<% end %>
    echo "Usage:"
    echo " $(basename $0) -h | --help "
    echo " $(basename $0) [option]... <application> <application-arguments>"
    echo " $(basename $0) [option]... -r [<trace>]..."
    echo
    echo "  -h, --help               Show this screen"
    echo "  -k, --kernel-verbose     Report kernels execution time with SIMD width and global/local sizes"
    echo "  -e, --extended           Print information for each Hostname / Process / Thread / Device"
    echo "  -t, --trace              Display trace"
    echo "  -l, --timeline           Dump the timeline"
    echo "  -j, --json               Summary will be printed as json"
    echo "  -m, --mode <mode>        (minimal, default, full)"
    echo "  --asm                    Dump in your current directory low level kernels informations (asm,isa,visa,...)."
    echo "  --mangle                 Use mangled name"
    echo "  --metadata               Display metadata"
    echo "  --max-name-size <size>   Maximun size allowed for kernels names (default -1)"
    echo "  --live                   Don't store the trace and process on the fly"
    echo "  -v, --version            Print the version string"
    echo "  -r, --replay    [path]   <application> <application-arguments> will be traited as pathes to traces folders ($HOME/lttng-traces/...)"
    echo "                           If no arguments are provided, will use the latest trace available"
    echo
    echo " Example:"
    echo " $(basename $0) ./a.out"
    echo
    echo "$(basename $0) will save the trace in $HOME/lttng-traces/"
    echo " Please tidy up from time to time"
    echo "                                                   __ "
    echo "For complain, praise, or bug reports please use: <(o )___"
    echo "   https://github.com/argonne-lcf/THAPI           ( ._> /"
    echo "   or send email to {apl,bvideau}@anl.gov          \`---'"
    exit 1
}

display_version() {
    cat $datadir/version
    exit 1
}

# Find all location of a `.so`
whichlib() {
    # Output of ldconfig:
    #/usr/lib32:
    #       libstdc++.so.6 -> libstdc++.so.6.0.26
    # After the awk:
    # -> /usr/lib32/libstdc++.so.6

    # In OpenSUSE ldconfig, is in '/sbin'.
    PATH=$PATH:/sbin ldconfig -vNX $(echo $LD_LIBRARY_PATH | sed 's/:/ /g') 2>/dev/null |
    awk -v p=$1 'match($1, ":")                    { header=substr($1, 1, length($1)-1)} \
                 match($1, "^lib") && match($1, p) { print header "/" $1}'
}

whichlib64_head() {
    # This function return only the first lib found
    # This avoid a broken pipe error when the old pattern `whichlib64 $foo | head - n1` was used
    for lib in $(whichlib $1)
    do
        if objdump -a $lib | grep 64 > /dev/null; then
            echo $lib
            break
        fi
    done
}

bt2_all() {
    if [ -n "$trace" ]; then
        # Todo filter direcly in the babeltrace
<% if languages.include?("opencl") and languages.include?("ze") and languages.include?("cuda")%>
        $bindir/babeltrace_thapi -r -c "$@"
<% elsif languages.include?("opencl") %>
        $bindir/babeltrace_opencl -r -c "$@"
<% elsif languages.include?("ze") %>
        $bindir/babeltrace_ze -r -c "$@"
<% elsif languages.include?("cuda") %>
        $bindir/babeltrace_cuda -r -c  "$@"
<% end %>
    fi

    if [ -n "$timeline" ]; then

       babeltrace2 --plugin-path=$libdir \
                   "$@" \
<% if languages.include?("opencl") %>
                   --component=filter.clinterval.interval \
<% end %>
<% if languages.include?("ze") %>
                   --component=filter.zeinterval.interval \
<% end %>
<% if languages.include?("cuda") %>
                   --component=filter.cudainterval.interval \
<% end %>
                   --component=sink.xprof.timeline
    fi

    if [ -z "$timeline" ] && [ -z "$trace" ]; then

       babeltrace2 --plugin-path=$libdir \
                   "$@" \
<% if languages.include?("opencl") %>
                   --component=filter.clinterval.interval \
<% end %>
<% if languages.include?("ze") %>
                   --component=filter.zeinterval.interval \
<% end %>
<% if languages.include?("cuda") %>
                   --component=filter.cudainterval.interval \
<% end %>
                   --component=sink.xprof.tally \
                   --params="display=$display, \
                            name=$mangling, \
                            display_mode=${display_mode}, \
                            display_metadata=${display_metadata}, \
                            display_name_max_size=${display_name_max_size}, \
                            display_kernel_verbose=${display_kernel_verbose}"
    fi
}
trace_and_summary() {
    if [ "$#" -eq 0 ]; then
        display_help
    fi

    mkdir -p ${LTTNG_HOME:-$HOME}
    lttng-sessiond $quiet --daemonize
    if [ -n "$live" ]; then
        lttng $quiet create iprof --live
    else
<% if languages.include?("opencl") and  languages.include?("ze")%>
        THAPI_LTTNG_O=${LTTNG_HOME:-$HOME}/lttng-traces/iprof-$(date '+%Y%m%d-%H%M%S')
<% elsif languages.include?("opencl") %>
        THAPI_LTTNG_O=${LTTNG_HOME:-$HOME}/lttng-traces/thapi-opencl-session-$(date '+%Y%m%d-%H%M%S')
<% elsif languages.include?("ze") %>
        THAPI_LTTNG_O=${LTTNG_HOME:-$HOME}/lttng-traces/thapi-ze-session-$(date '+%Y%m%d-%H%M%S')
<% elsif languages.include?("cuda") %>
        THAPI_LTTNG_O=${LTTNG_HOME:-$HOME}/lttng-traces/thapi-cuda-session-$(date '+%Y%m%d-%H%M%S')
<% end %>
        lttng $quiet create -o $THAPI_LTTNG_O
    fi

    #Using blocking more to trace event record loss
    if [ -n "$live" ]; then
        lttng $quiet enable-channel --userspace --blocking-timeout=inf \
                                    --tracefile-size=524288 --tracefile-count=32 \
                                    blocking-channel
    else
        lttng $quiet enable-channel --userspace --blocking-timeout=inf blocking-channel
    fi
<% if languages.include?("opencl") %>
    opencl_disable_events="lttng_ust_opencl:clSetKernelArg*,lttng_ust_opencl:clGetKernelArg*,"
    opencl_disable_events+="lttng_ust_opencl:clSetKernelExecInfo*,lttng_ust_opencl:clGetKernelInfo*,"
    opencl_disable_events+="lttng_ust_opencl:clGetMemAllocInfoINTEL*"

    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl:* -x ${opencl_disable_events}
    if [ $mode = "full" ]; then
        lttng $quiet enable-event --channel=blocking-channel --userspace ${opencl_disable_events}
    fi
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_build:infos*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_profiling:*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_arguments:kernel_info
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_opencl_devices:*
<% end %>
<% if languages.include?("ze") %>

    export LTTNG_UST_ZE_PROFILE=1
    export LTTNG_UST_ZE_PARANOID_DRIFT=1

    if [ $mode = "minimal" ]; then
        lttng $quiet enable-event --channel=blocking-channel --userspace $(cat $datadir/babeltrace_zeprofiling_apis.txt)
        lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze_properties:device_timer
    else
        lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze_build:log*
        lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze_profiling:*

        ze_disable_properties="lttng_ust_ze_properties:memory_info_properties,lttng_ust_ze_properties:memory_info_range"
        ze_disable_events="lttng_ust_ze:zeKernelSetArgumentValue*,lttng_ust_ze:ze*Get*Properties*,lttng_ust_ze:zeKernelGetName"
        lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze_properties:* -x ${ze_disable_properties}
        lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_ze:* -x ${ze_disable_events}

        if [ $mode = "full" ]; then
            lttng $quiet enable-event --channel=blocking-channel --userspace ${ze_disable_events} 
            lttng $quiet enable-event --channel=blocking-channel --userspace ${ze_disable_properties}
        fi
    fi
<% end %>
<% if languages.include?("cuda") %>
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_cuda:*
    export LTTNG_UST_CUDA_PROFILE=1
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_cuda_profiling:*
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_cuda_properties:*
<% end %>
    # Add thapi metadata
    lttng $quiet enable-event --channel=blocking-channel --userspace lttng_ust_thapi:*

    #Add vpid/vtid to avoid race condition
    lttng $quiet add-context --userspace --channel=blocking-channel -t vpid -t vtid

    #Preventing trace event record loss
    export LTTNG_UST_ALLOW_BLOCKING=1

    #Find libs and preload
<% if languages.include?("opencl") %>
<%= print_loader_logic("opencl","libOpenCL","libTracerOpenCL")%>
<% end %>
<% if languages.include?("ze") %>
<%= print_loader_logic("ze","libze_loader","libTracerZE")%>
<% end %>
<% if languages.include?("cuda") %>
<%= print_loader_logic("cuda","libcuda","libTracerCUDA")%>
<% end %>
    # Start collection
    lttng $quiet start

    #Create the metadata.
    #read and dump `$LTTNG_UST_THAPI_METADATA` env
    $bindir/thapi_metadata

    if [ -n "$live" ]; then
        if [ -n "$trace" ]; then
            bt2_all --live net://localhost/host/$(hostname)/iprof &
        else
            bt2_all --component=source.ctf.lttng-live \
                    --params="inputs=[\"net://localhost/host/$(hostname)/iprof\"],
                              session-not-found-action=end" &
        fi
        pid=$!
    fi

    # Run the binary
    trap 'trace_epilogue' EXIT SIGABRT SIGSEGV
    "$@"
}

trace_epilogue() {
    lttng $quiet stop
    lttng $quiet destroy
    if [ -n "$live" ]; then
        wait $pid
    else
        summary
    fi
}


summary() {
    if [ -n "$THAPI_LTTNG_O" ]; then
        lttng_last_session=$THAPI_LTTNG_O
        >&2 echo "Trace location:" $lttng_last_session
        >&2 echo
    elif [ "$#" -eq 0 ]; then
<% if languages.include?("opencl") and languages.include?("ze") and languages.include?("cuda")%>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/* | head -1)
<% elsif languages.include?("opencl") %>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/thapi-opencl-session* | head -1)
<% elsif languages.include?("ze") %>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/thapi-ze-session* | head -1)
<% elsif languages.include?("cuda") %>
        lttng_last_session=$(ls -dt ${LTTNG_HOME:-$HOME}/lttng-traces/thapi-cuda-session* | head -1)
<% end %>
        >&2 echo "Trace location:" $lttng_last_session
        >&2 echo
    else
        lttng_last_session=$@
    fi
    # Check that the argument are trace.
    # We don't quote the $lttng_last_session, to be able to loop over hit.
    # Should be cleaner to use bash arrays.
    for f in  $lttng_last_session; do
        if [ ! -d "$f" ]; then
            echo "$f is not a trace folder, cannot replay. Exiting..."
            exit 1
        fi
    done
    bt2_all "${lttng_last_session}"
}

#  _
# |_) _. ._ _ o ._   _     /\  ._ _
# |  (_| | _> | | | (_|   /--\ | (_| \/
#                    _|           _|
display=compact
mangling=demangle
display_mode=human
display_metadata=false
display_name_max_size=80
display_kernel_verbose=false
mode=default

if [ "$#" -eq 0 ]; then
    display_help
fi

while (( "$#" )); do
    case "$1" in
        -h | --help)            display_help; exit ;;
        -v | --version)         display_version; exit ;;
        -k | --kernel-verbose)  shift; display_kernel_verbose=true ;;
        -e | --extented)        shift; display=extended ;;
        -r | --replay)          shift; replay=true ;;
        -t | --trace)           shift; trace=true ;;
        -l | --timeline)        shift; timeline=true ;;
        -j | --json)            shift; display_mode=json;;
        -m | --mode)            shift; mode=$1; shift ;;
        --asm)                  shift; asm=true ;;
        --metadata)             shift; display_metadata=true ;;
        --max-name-size)        shift; display_name_max_size=$1; shift ;;
        --mangle)               shift; mangling=mangle ;;
        --debug)                shift; debug=true ;;
        --live)                 shift; live=true ;;
        --)                     shift; break ;;
        *)                      break  ;;
    esac
done

if [ -n "$debug" ]; then
    set -x
    export LTTNG_UST_ZE_VERBOSE=1
    export LTTNG_UST_OPENCL_VERBOSE=1
    export LTTNG_UST_CUDA_VERBOSE=1
    export LIBBABELTRACE2_INIT_LOG_LEVEL=WARNING
    export BABELTRACE_CLI_LOG_LEVEL=WARNING
else
    quiet="--quiet"
fi

if [ -n "$asm" ]; then
    export SYCL_CACHE_PERSISTENT=0
    #This is a workarround for the fact that `SYCL_CACHE_PERSISTENT` doesn't work yet.
    rm -rf "$USER"/libsycl_cache/.cache/

    export IGC_ShaderDumpEnable=1
    export IGC_DumpToCurrentDir=1
fi

if [ -n "$replay" ]; then
    summary "$@"
else
    trace_and_summary "$@"
fi
