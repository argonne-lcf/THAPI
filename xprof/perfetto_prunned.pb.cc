// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto_prunned.proto

#include "perfetto_prunned.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto_pruned {
PROTOBUF_CONSTEXPR ProcessDescriptor::ProcessDescriptor(
    ::_pbi::ConstantInitialized)
  : process_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(0){}
struct ProcessDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessDescriptorDefaultTypeInternal() {}
  union {
    ProcessDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessDescriptorDefaultTypeInternal _ProcessDescriptor_default_instance_;
PROTOBUF_CONSTEXPR TracePacketDefaults::TracePacketDefaults(
    ::_pbi::ConstantInitialized)
  : timestamp_clock_id_(0u){}
struct TracePacketDefaultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracePacketDefaultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracePacketDefaultsDefaultTypeInternal() {}
  union {
    TracePacketDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracePacketDefaultsDefaultTypeInternal _TracePacketDefaults_default_instance_;
PROTOBUF_CONSTEXPR ThreadDescriptor::ThreadDescriptor(
    ::_pbi::ConstantInitialized)
  : pid_(0)
  , tid_(0){}
struct ThreadDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadDescriptorDefaultTypeInternal() {}
  union {
    ThreadDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadDescriptorDefaultTypeInternal _ThreadDescriptor_default_instance_;
PROTOBUF_CONSTEXPR TrackDescriptor::TrackDescriptor(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , process_(nullptr)
  , thread_(nullptr)
  , uuid_(uint64_t{0u})
  , parent_uuid_(uint64_t{0u}){}
struct TrackDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackDescriptorDefaultTypeInternal() {}
  union {
    TrackDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackDescriptorDefaultTypeInternal _TrackDescriptor_default_instance_;
PROTOBUF_CONSTEXPR TrackEvent::TrackEvent(
    ::_pbi::ConstantInitialized)
  : track_uuid_(uint64_t{0u})
  , type_(1)

  , _oneof_case_{}{}
struct TrackEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEventDefaultTypeInternal() {}
  union {
    TrackEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEventDefaultTypeInternal _TrackEvent_default_instance_;
PROTOBUF_CONSTEXPR TracePacket::TracePacket(
    ::_pbi::ConstantInitialized)
  : trace_packet_defaults_(nullptr)
  , timestamp_(uint64_t{0u})
  , previous_packet_dropped_(false)
  , _oneof_case_{}{}
struct TracePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracePacketDefaultTypeInternal() {}
  union {
    TracePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracePacketDefaultTypeInternal _TracePacket_default_instance_;
PROTOBUF_CONSTEXPR Trace::Trace(
    ::_pbi::ConstantInitialized)
  : packet_(){}
struct TraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceDefaultTypeInternal() {}
  union {
    Trace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceDefaultTypeInternal _Trace_default_instance_;
}  // namespace perfetto_pruned
static ::_pb::Metadata file_level_metadata_perfetto_5fprunned_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_perfetto_5fprunned_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_perfetto_5fprunned_2eproto = nullptr;

const uint32_t TableStruct_perfetto_5fprunned_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ProcessDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ProcessDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ProcessDescriptor, pid_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ProcessDescriptor, process_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacketDefaults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacketDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacketDefaults, timestamp_clock_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ThreadDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ThreadDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ThreadDescriptor, pid_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::ThreadDescriptor, tid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, uuid_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, parent_uuid_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, name_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, process_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackDescriptor, thread_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackEvent, type_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackEvent, track_uuid_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TrackEvent, name_field_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, trace_packet_defaults_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, previous_packet_dropped_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, data_),
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::TracePacket, optional_trusted_packet_sequence_id_),
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perfetto_pruned::Trace, packet_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::perfetto_pruned::ProcessDescriptor)},
  { 10, 17, -1, sizeof(::perfetto_pruned::TracePacketDefaults)},
  { 18, 26, -1, sizeof(::perfetto_pruned::ThreadDescriptor)},
  { 28, 39, -1, sizeof(::perfetto_pruned::TrackDescriptor)},
  { 44, 54, -1, sizeof(::perfetto_pruned::TrackEvent)},
  { 57, 71, -1, sizeof(::perfetto_pruned::TracePacket)},
  { 77, -1, -1, sizeof(::perfetto_pruned::Trace)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::perfetto_pruned::_ProcessDescriptor_default_instance_._instance,
  &::perfetto_pruned::_TracePacketDefaults_default_instance_._instance,
  &::perfetto_pruned::_ThreadDescriptor_default_instance_._instance,
  &::perfetto_pruned::_TrackDescriptor_default_instance_._instance,
  &::perfetto_pruned::_TrackEvent_default_instance_._instance,
  &::perfetto_pruned::_TracePacket_default_instance_._instance,
  &::perfetto_pruned::_Trace_default_instance_._instance,
};

const char descriptor_table_protodef_perfetto_5fprunned_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026perfetto_prunned.proto\022\017perfetto_prune"
  "d\"6\n\021ProcessDescriptor\022\013\n\003pid\030\001 \001(\005\022\024\n\014p"
  "rocess_name\030\006 \001(\t\"1\n\023TracePacketDefaults"
  "\022\032\n\022timestamp_clock_id\030: \001(\r\",\n\020ThreadDe"
  "scriptor\022\013\n\003pid\030\001 \001(\005\022\013\n\003tid\030\002 \001(\005\"\252\001\n\017T"
  "rackDescriptor\022\014\n\004uuid\030\001 \001(\004\022\023\n\013parent_u"
  "uid\030\005 \001(\004\022\014\n\004name\030\002 \001(\t\0223\n\007process\030\003 \001(\013"
  "2\".perfetto_pruned.ProcessDescriptor\0221\n\006"
  "thread\030\004 \001(\0132!.perfetto_pruned.ThreadDes"
  "criptor\"\240\001\n\nTrackEvent\022.\n\004type\030\t \001(\0162 .p"
  "erfetto_pruned.TrackEvent.Type\022\022\n\ntrack_"
  "uuid\030\013 \001(\004\022\016\n\004name\030\027 \001(\tH\000\"0\n\004Type\022\024\n\020TY"
  "PE_SLICE_BEGIN\020\001\022\022\n\016TYPE_SLICE_END\020\002B\014\n\n"
  "name_field\"\315\002\n\013TracePacket\022\021\n\ttimestamp\030"
  "\010 \001(\004\0222\n\013track_event\030\013 \001(\0132\033.perfetto_pr"
  "uned.TrackEventH\000\022<\n\020track_descriptor\030< "
  "\001(\0132 .perfetto_pruned.TrackDescriptorH\000\022"
  "$\n\032trusted_packet_sequence_id\030\n \001(\rH\001\022C\n"
  "\025trace_packet_defaults\030; \002(\0132$.perfetto_"
  "pruned.TracePacketDefaults\022\037\n\027previous_p"
  "acket_dropped\030* \001(\010B\006\n\004dataB%\n#optional_"
  "trusted_packet_sequence_id\"5\n\005Trace\022,\n\006p"
  "acket\030\001 \003(\0132\034.perfetto_pruned.TracePacke"
  "t*<\n\014BuiltinClock\022\032\n\026BUILTIN_CLOCK_BOOTT"
  "IME\020\006\"\004\010\007\020\007\"\004\010\010\020\010\"\004\010\t\020\t"
  ;
static ::_pbi::once_flag descriptor_table_perfetto_5fprunned_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_perfetto_5fprunned_2eproto = {
    false, false, 983, descriptor_table_protodef_perfetto_5fprunned_2eproto,
    "perfetto_prunned.proto",
    &descriptor_table_perfetto_5fprunned_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_perfetto_5fprunned_2eproto::offsets,
    file_level_metadata_perfetto_5fprunned_2eproto, file_level_enum_descriptors_perfetto_5fprunned_2eproto,
    file_level_service_descriptors_perfetto_5fprunned_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_perfetto_5fprunned_2eproto_getter() {
  return &descriptor_table_perfetto_5fprunned_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_perfetto_5fprunned_2eproto(&descriptor_table_perfetto_5fprunned_2eproto);
namespace perfetto_pruned {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perfetto_5fprunned_2eproto);
  return file_level_enum_descriptors_perfetto_5fprunned_2eproto[0];
}
bool TrackEvent_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrackEvent_Type TrackEvent::TYPE_SLICE_BEGIN;
constexpr TrackEvent_Type TrackEvent::TYPE_SLICE_END;
constexpr TrackEvent_Type TrackEvent::Type_MIN;
constexpr TrackEvent_Type TrackEvent::Type_MAX;
constexpr int TrackEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuiltinClock_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perfetto_5fprunned_2eproto);
  return file_level_enum_descriptors_perfetto_5fprunned_2eproto[1];
}
bool BuiltinClock_IsValid(int value) {
  switch (value) {
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProcessDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessDescriptor>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessDescriptor::ProcessDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.ProcessDescriptor)
}
ProcessDescriptor::ProcessDescriptor(const ProcessDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_process_name()) {
    process_name_.Set(from._internal_process_name(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.ProcessDescriptor)
}

inline void ProcessDescriptor::SharedCtor() {
process_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  process_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_ = 0;
}

ProcessDescriptor::~ProcessDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.ProcessDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  process_name_.Destroy();
}

void ProcessDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.ProcessDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_name_.ClearNonDefaultToEmpty();
  }
  pid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string process_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_process_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto_pruned.ProcessDescriptor.process_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.ProcessDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional string process_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perfetto_pruned.ProcessDescriptor.process_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_process_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.ProcessDescriptor)
  return target;
}

size_t ProcessDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.ProcessDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string process_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessDescriptor::GetClassData() const { return &_class_data_; }

void ProcessDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessDescriptor *>(to)->MergeFrom(
      static_cast<const ProcessDescriptor &>(from));
}


void ProcessDescriptor::MergeFrom(const ProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.ProcessDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_process_name(from._internal_process_name());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessDescriptor::CopyFrom(const ProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.ProcessDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessDescriptor::IsInitialized() const {
  return true;
}

void ProcessDescriptor::InternalSwap(ProcessDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &process_name_, lhs_arena,
      &other->process_name_, rhs_arena
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[0]);
}

// ===================================================================

class TracePacketDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<TracePacketDefaults>()._has_bits_);
  static void set_has_timestamp_clock_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TracePacketDefaults::TracePacketDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.TracePacketDefaults)
}
TracePacketDefaults::TracePacketDefaults(const TracePacketDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_clock_id_ = from.timestamp_clock_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.TracePacketDefaults)
}

inline void TracePacketDefaults::SharedCtor() {
timestamp_clock_id_ = 0u;
}

TracePacketDefaults::~TracePacketDefaults() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.TracePacketDefaults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TracePacketDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TracePacketDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TracePacketDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.TracePacketDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_clock_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracePacketDefaults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp_clock_id = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_timestamp_clock_id(&has_bits);
          timestamp_clock_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TracePacketDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.TracePacketDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp_clock_id = 58;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_timestamp_clock_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.TracePacketDefaults)
  return target;
}

size_t TracePacketDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.TracePacketDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timestamp_clock_id = 58;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_timestamp_clock_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TracePacketDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TracePacketDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TracePacketDefaults::GetClassData() const { return &_class_data_; }

void TracePacketDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TracePacketDefaults *>(to)->MergeFrom(
      static_cast<const TracePacketDefaults &>(from));
}


void TracePacketDefaults::MergeFrom(const TracePacketDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.TracePacketDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp_clock_id()) {
    _internal_set_timestamp_clock_id(from._internal_timestamp_clock_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TracePacketDefaults::CopyFrom(const TracePacketDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.TracePacketDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracePacketDefaults::IsInitialized() const {
  return true;
}

void TracePacketDefaults::InternalSwap(TracePacketDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_clock_id_, other->timestamp_clock_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracePacketDefaults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[1]);
}

// ===================================================================

class ThreadDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ThreadDescriptor>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ThreadDescriptor::ThreadDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.ThreadDescriptor)
}
ThreadDescriptor::ThreadDescriptor(const ThreadDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.ThreadDescriptor)
}

inline void ThreadDescriptor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(tid_));
}

ThreadDescriptor::~ThreadDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.ThreadDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThreadDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThreadDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThreadDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.ThreadDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tid_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(tid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreadDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.ThreadDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional int32 tid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.ThreadDescriptor)
  return target;
}

size_t ThreadDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.ThreadDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional int32 tid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreadDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThreadDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreadDescriptor::GetClassData() const { return &_class_data_; }

void ThreadDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThreadDescriptor *>(to)->MergeFrom(
      static_cast<const ThreadDescriptor &>(from));
}


void ThreadDescriptor::MergeFrom(const ThreadDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.ThreadDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadDescriptor::CopyFrom(const ThreadDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.ThreadDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadDescriptor::IsInitialized() const {
  return true;
}

void ThreadDescriptor::InternalSwap(ThreadDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadDescriptor, tid_)
      + sizeof(ThreadDescriptor::tid_)
      - PROTOBUF_FIELD_OFFSET(ThreadDescriptor, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[2]);
}

// ===================================================================

class TrackDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackDescriptor>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parent_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto_pruned::ProcessDescriptor& process(const TrackDescriptor* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto_pruned::ThreadDescriptor& thread(const TrackDescriptor* msg);
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto_pruned::ProcessDescriptor&
TrackDescriptor::_Internal::process(const TrackDescriptor* msg) {
  return *msg->process_;
}
const ::perfetto_pruned::ThreadDescriptor&
TrackDescriptor::_Internal::thread(const TrackDescriptor* msg) {
  return *msg->thread_;
}
TrackDescriptor::TrackDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.TrackDescriptor)
}
TrackDescriptor::TrackDescriptor(const TrackDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_process()) {
    process_ = new ::perfetto_pruned::ProcessDescriptor(*from.process_);
  } else {
    process_ = nullptr;
  }
  if (from._internal_has_thread()) {
    thread_ = new ::perfetto_pruned::ThreadDescriptor(*from.thread_);
  } else {
    thread_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_uuid_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(parent_uuid_));
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.TrackDescriptor)
}

inline void TrackDescriptor::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&process_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_uuid_) -
    reinterpret_cast<char*>(&process_)) + sizeof(parent_uuid_));
}

TrackDescriptor::~TrackDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.TrackDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete process_;
  if (this != internal_default_instance()) delete thread_;
}

void TrackDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.TrackDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(thread_ != nullptr);
      thread_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_uuid_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(parent_uuid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto_pruned.TrackDescriptor.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto_pruned.ProcessDescriptor process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto_pruned.ThreadDescriptor thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_thread(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 parent_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_parent_uuid(&has_bits);
          parent_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.TrackDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uuid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uuid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perfetto_pruned.TrackDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .perfetto_pruned.ProcessDescriptor process = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::process(this),
        _Internal::process(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto_pruned.ThreadDescriptor thread = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::thread(this),
        _Internal::thread(this).GetCachedSize(), target, stream);
  }

  // optional uint64 parent_uuid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_parent_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.TrackDescriptor)
  return target;
}

size_t TrackDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.TrackDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .perfetto_pruned.ProcessDescriptor process = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

    // optional .perfetto_pruned.ThreadDescriptor thread = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thread_);
    }

    // optional uint64 uuid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uuid());
    }

    // optional uint64 parent_uuid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_uuid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackDescriptor::GetClassData() const { return &_class_data_; }

void TrackDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackDescriptor *>(to)->MergeFrom(
      static_cast<const TrackDescriptor &>(from));
}


void TrackDescriptor::MergeFrom(const TrackDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.TrackDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_process()->::perfetto_pruned::ProcessDescriptor::MergeFrom(from._internal_process());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_thread()->::perfetto_pruned::ThreadDescriptor::MergeFrom(from._internal_thread());
    }
    if (cached_has_bits & 0x00000008u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_uuid_ = from.parent_uuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackDescriptor::CopyFrom(const TrackDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.TrackDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDescriptor::IsInitialized() const {
  return true;
}

void TrackDescriptor::InternalSwap(TrackDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackDescriptor, parent_uuid_)
      + sizeof(TrackDescriptor::parent_uuid_)
      - PROTOBUF_FIELD_OFFSET(TrackDescriptor, process_)>(
          reinterpret_cast<char*>(&process_),
          reinterpret_cast<char*>(&other->process_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[3]);
}

// ===================================================================

class TrackEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEvent>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackEvent::TrackEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.TrackEvent)
}
TrackEvent::TrackEvent(const TrackEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&track_uuid_, &from.track_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&track_uuid_)) + sizeof(type_));
  clear_has_name_field();
  switch (from.name_field_case()) {
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.TrackEvent)
}

inline void TrackEvent::SharedCtor() {
track_uuid_ = uint64_t{0u};
type_ = 1;
clear_has_name_field();
}

TrackEvent::~TrackEvent() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.TrackEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_name_field()) {
    clear_name_field();
  }
}

void TrackEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackEvent::clear_name_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto_pruned.TrackEvent)
  switch (name_field_case()) {
    case kName: {
      name_field_.name_.Destroy();
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NAME_FIELD_NOT_SET;
}


void TrackEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.TrackEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    track_uuid_ = uint64_t{0u};
    type_ = 1;
  }
  clear_name_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto_pruned.TrackEvent.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto_pruned::TrackEvent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::perfetto_pruned::TrackEvent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 track_uuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_track_uuid(&has_bits);
          track_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto_pruned.TrackEvent.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.TrackEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto_pruned.TrackEvent.Type type = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // optional uint64 track_uuid = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_track_uuid(), target);
  }

  // string name = 23;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perfetto_pruned.TrackEvent.name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.TrackEvent)
  return target;
}

size_t TrackEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.TrackEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 track_uuid = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_uuid());
    }

    // optional .perfetto_pruned.TrackEvent.Type type = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (name_field_case()) {
    // string name = 23;
    case kName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackEvent::GetClassData() const { return &_class_data_; }

void TrackEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackEvent *>(to)->MergeFrom(
      static_cast<const TrackEvent &>(from));
}


void TrackEvent::MergeFrom(const TrackEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.TrackEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      track_uuid_ = from.track_uuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.name_field_case()) {
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackEvent::CopyFrom(const TrackEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.TrackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEvent::IsInitialized() const {
  return true;
}

void TrackEvent::InternalSwap(TrackEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(track_uuid_, other->track_uuid_);
  swap(type_, other->type_);
  swap(name_field_, other->name_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[4]);
}

// ===================================================================

class TracePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<TracePacket>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto_pruned::TrackEvent& track_event(const TracePacket* msg);
  static const ::perfetto_pruned::TrackDescriptor& track_descriptor(const TracePacket* msg);
  static const ::perfetto_pruned::TracePacketDefaults& trace_packet_defaults(const TracePacket* msg);
  static void set_has_trace_packet_defaults(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_packet_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::perfetto_pruned::TrackEvent&
TracePacket::_Internal::track_event(const TracePacket* msg) {
  return *msg->data_.track_event_;
}
const ::perfetto_pruned::TrackDescriptor&
TracePacket::_Internal::track_descriptor(const TracePacket* msg) {
  return *msg->data_.track_descriptor_;
}
const ::perfetto_pruned::TracePacketDefaults&
TracePacket::_Internal::trace_packet_defaults(const TracePacket* msg) {
  return *msg->trace_packet_defaults_;
}
void TracePacket::set_allocated_track_event(::perfetto_pruned::TrackEvent* track_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (track_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_event);
    if (message_arena != submessage_arena) {
      track_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event, submessage_arena);
    }
    set_has_track_event();
    data_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TracePacket.track_event)
}
void TracePacket::set_allocated_track_descriptor(::perfetto_pruned::TrackDescriptor* track_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (track_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_descriptor);
    if (message_arena != submessage_arena) {
      track_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_descriptor, submessage_arena);
    }
    set_has_track_descriptor();
    data_.track_descriptor_ = track_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TracePacket.track_descriptor)
}
TracePacket::TracePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.TracePacket)
}
TracePacket::TracePacket(const TracePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trace_packet_defaults()) {
    trace_packet_defaults_ = new ::perfetto_pruned::TracePacketDefaults(*from.trace_packet_defaults_);
  } else {
    trace_packet_defaults_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_packet_dropped_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(previous_packet_dropped_));
  clear_has_data();
  switch (from.data_case()) {
    case kTrackEvent: {
      _internal_mutable_track_event()->::perfetto_pruned::TrackEvent::MergeFrom(from._internal_track_event());
      break;
    }
    case kTrackDescriptor: {
      _internal_mutable_track_descriptor()->::perfetto_pruned::TrackDescriptor::MergeFrom(from._internal_track_descriptor());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  clear_has_optional_trusted_packet_sequence_id();
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      _internal_set_trusted_packet_sequence_id(from._internal_trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.TracePacket)
}

inline void TracePacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trace_packet_defaults_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&previous_packet_dropped_) -
    reinterpret_cast<char*>(&trace_packet_defaults_)) + sizeof(previous_packet_dropped_));
clear_has_data();
clear_has_optional_trusted_packet_sequence_id();
}

TracePacket::~TracePacket() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.TracePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TracePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trace_packet_defaults_;
  if (has_data()) {
    clear_data();
  }
  if (has_optional_trusted_packet_sequence_id()) {
    clear_optional_trusted_packet_sequence_id();
  }
}

void TracePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TracePacket::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:perfetto_pruned.TracePacket)
  switch (data_case()) {
    case kTrackEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.track_event_;
      }
      break;
    }
    case kTrackDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.track_descriptor_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}

void TracePacket::clear_optional_trusted_packet_sequence_id() {
// @@protoc_insertion_point(one_of_clear_start:perfetto_pruned.TracePacket)
  switch (optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}


void TracePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.TracePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trace_packet_defaults_ != nullptr);
    trace_packet_defaults_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_packet_dropped_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(previous_packet_dropped_));
  }
  clear_data();
  clear_optional_trusted_packet_sequence_id();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 trusted_packet_sequence_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto_pruned.TrackEvent track_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool previous_packet_dropped = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_previous_packet_dropped(&has_bits);
          previous_packet_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .perfetto_pruned.TracePacketDefaults trace_packet_defaults = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_packet_defaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto_pruned.TrackDescriptor track_descriptor = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TracePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.TracePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp(), target);
  }

  // uint32 trusted_packet_sequence_id = 10;
  if (_internal_has_trusted_packet_sequence_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_trusted_packet_sequence_id(), target);
  }

  // .perfetto_pruned.TrackEvent track_event = 11;
  if (_internal_has_track_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::track_event(this),
        _Internal::track_event(this).GetCachedSize(), target, stream);
  }

  // optional bool previous_packet_dropped = 42;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_previous_packet_dropped(), target);
  }

  // required .perfetto_pruned.TracePacketDefaults trace_packet_defaults = 59;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::trace_packet_defaults(this),
        _Internal::trace_packet_defaults(this).GetCachedSize(), target, stream);
  }

  // .perfetto_pruned.TrackDescriptor track_descriptor = 60;
  if (_internal_has_track_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::track_descriptor(this),
        _Internal::track_descriptor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.TracePacket)
  return target;
}

size_t TracePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.TracePacket)
  size_t total_size = 0;

  // required .perfetto_pruned.TracePacketDefaults trace_packet_defaults = 59;
  if (_internal_has_trace_packet_defaults()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_packet_defaults_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional bool previous_packet_dropped = 42;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

  }
  switch (data_case()) {
    // .perfetto_pruned.TrackEvent track_event = 11;
    case kTrackEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.track_event_);
      break;
    }
    // .perfetto_pruned.TrackDescriptor track_descriptor = 60;
    case kTrackDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.track_descriptor_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (optional_trusted_packet_sequence_id_case()) {
    // uint32 trusted_packet_sequence_id = 10;
    case kTrustedPacketSequenceId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TracePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TracePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TracePacket::GetClassData() const { return &_class_data_; }

void TracePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TracePacket *>(to)->MergeFrom(
      static_cast<const TracePacket &>(from));
}


void TracePacket::MergeFrom(const TracePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.TracePacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trace_packet_defaults()->::perfetto_pruned::TracePacketDefaults::MergeFrom(from._internal_trace_packet_defaults());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      previous_packet_dropped_ = from.previous_packet_dropped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.data_case()) {
    case kTrackEvent: {
      _internal_mutable_track_event()->::perfetto_pruned::TrackEvent::MergeFrom(from._internal_track_event());
      break;
    }
    case kTrackDescriptor: {
      _internal_mutable_track_descriptor()->::perfetto_pruned::TrackDescriptor::MergeFrom(from._internal_track_descriptor());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      _internal_set_trusted_packet_sequence_id(from._internal_trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TracePacket::CopyFrom(const TracePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.TracePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracePacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TracePacket::InternalSwap(TracePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracePacket, previous_packet_dropped_)
      + sizeof(TracePacket::previous_packet_dropped_)
      - PROTOBUF_FIELD_OFFSET(TracePacket, trace_packet_defaults_)>(
          reinterpret_cast<char*>(&trace_packet_defaults_),
          reinterpret_cast<char*>(&other->trace_packet_defaults_));
  swap(data_, other->data_);
  swap(optional_trusted_packet_sequence_id_, other->optional_trusted_packet_sequence_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[5]);
}

// ===================================================================

class Trace::_Internal {
 public:
};

Trace::Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packet_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto_pruned.Trace)
}
Trace::Trace(const Trace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packet_(from.packet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto_pruned.Trace)
}

inline void Trace::SharedCtor() {
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:perfetto_pruned.Trace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto_pruned.Trace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto_pruned.TracePacket packet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto_pruned.Trace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto_pruned.TracePacket packet = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packet_size()); i < n; i++) {
    const auto& repfield = this->_internal_packet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto_pruned.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto_pruned.Trace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto_pruned.TracePacket packet = 1;
  total_size += 1UL * this->_internal_packet_size();
  for (const auto& msg : this->packet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trace::GetClassData() const { return &_class_data_; }

void Trace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Trace *>(to)->MergeFrom(
      static_cast<const Trace &>(from));
}


void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto_pruned.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packet_.MergeFrom(from.packet_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto_pruned.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(packet_))
    return false;
  return true;
}

void Trace::InternalSwap(Trace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  packet_.InternalSwap(&other->packet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perfetto_5fprunned_2eproto_getter, &descriptor_table_perfetto_5fprunned_2eproto_once,
      file_level_metadata_perfetto_5fprunned_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perfetto_pruned
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto_pruned::ProcessDescriptor*
Arena::CreateMaybeMessage< ::perfetto_pruned::ProcessDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::ProcessDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto_pruned::TracePacketDefaults*
Arena::CreateMaybeMessage< ::perfetto_pruned::TracePacketDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::TracePacketDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto_pruned::ThreadDescriptor*
Arena::CreateMaybeMessage< ::perfetto_pruned::ThreadDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::ThreadDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto_pruned::TrackDescriptor*
Arena::CreateMaybeMessage< ::perfetto_pruned::TrackDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::TrackDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto_pruned::TrackEvent*
Arena::CreateMaybeMessage< ::perfetto_pruned::TrackEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::TrackEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto_pruned::TracePacket*
Arena::CreateMaybeMessage< ::perfetto_pruned::TracePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::TracePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto_pruned::Trace*
Arena::CreateMaybeMessage< ::perfetto_pruned::Trace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto_pruned::Trace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
