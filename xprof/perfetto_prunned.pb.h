// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto_prunned.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perfetto_5fprunned_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perfetto_5fprunned_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perfetto_5fprunned_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perfetto_5fprunned_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perfetto_5fprunned_2eproto;
namespace perfetto_pruned {
class ProcessDescriptor;
struct ProcessDescriptorDefaultTypeInternal;
extern ProcessDescriptorDefaultTypeInternal _ProcessDescriptor_default_instance_;
class ThreadDescriptor;
struct ThreadDescriptorDefaultTypeInternal;
extern ThreadDescriptorDefaultTypeInternal _ThreadDescriptor_default_instance_;
class Trace;
struct TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
class TracePacket;
struct TracePacketDefaultTypeInternal;
extern TracePacketDefaultTypeInternal _TracePacket_default_instance_;
class TracePacketDefaults;
struct TracePacketDefaultsDefaultTypeInternal;
extern TracePacketDefaultsDefaultTypeInternal _TracePacketDefaults_default_instance_;
class TrackDescriptor;
struct TrackDescriptorDefaultTypeInternal;
extern TrackDescriptorDefaultTypeInternal _TrackDescriptor_default_instance_;
class TrackEvent;
struct TrackEventDefaultTypeInternal;
extern TrackEventDefaultTypeInternal _TrackEvent_default_instance_;
}  // namespace perfetto_pruned
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto_pruned::ProcessDescriptor* Arena::CreateMaybeMessage<::perfetto_pruned::ProcessDescriptor>(Arena*);
template<> ::perfetto_pruned::ThreadDescriptor* Arena::CreateMaybeMessage<::perfetto_pruned::ThreadDescriptor>(Arena*);
template<> ::perfetto_pruned::Trace* Arena::CreateMaybeMessage<::perfetto_pruned::Trace>(Arena*);
template<> ::perfetto_pruned::TracePacket* Arena::CreateMaybeMessage<::perfetto_pruned::TracePacket>(Arena*);
template<> ::perfetto_pruned::TracePacketDefaults* Arena::CreateMaybeMessage<::perfetto_pruned::TracePacketDefaults>(Arena*);
template<> ::perfetto_pruned::TrackDescriptor* Arena::CreateMaybeMessage<::perfetto_pruned::TrackDescriptor>(Arena*);
template<> ::perfetto_pruned::TrackEvent* Arena::CreateMaybeMessage<::perfetto_pruned::TrackEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto_pruned {

enum TrackEvent_Type : int {
  TrackEvent_Type_TYPE_SLICE_BEGIN = 1,
  TrackEvent_Type_TYPE_SLICE_END = 2
};
bool TrackEvent_Type_IsValid(int value);
constexpr TrackEvent_Type TrackEvent_Type_Type_MIN = TrackEvent_Type_TYPE_SLICE_BEGIN;
constexpr TrackEvent_Type TrackEvent_Type_Type_MAX = TrackEvent_Type_TYPE_SLICE_END;
constexpr int TrackEvent_Type_Type_ARRAYSIZE = TrackEvent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackEvent_Type_descriptor();
template<typename T>
inline const std::string& TrackEvent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackEvent_Type_descriptor(), enum_t_value);
}
inline bool TrackEvent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackEvent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackEvent_Type>(
    TrackEvent_Type_descriptor(), name, value);
}
enum BuiltinClock : int {
  BUILTIN_CLOCK_BOOTTIME = 6
};
bool BuiltinClock_IsValid(int value);
constexpr BuiltinClock BuiltinClock_MIN = BUILTIN_CLOCK_BOOTTIME;
constexpr BuiltinClock BuiltinClock_MAX = BUILTIN_CLOCK_BOOTTIME;
constexpr int BuiltinClock_ARRAYSIZE = BuiltinClock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuiltinClock_descriptor();
template<typename T>
inline const std::string& BuiltinClock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuiltinClock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuiltinClock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuiltinClock_descriptor(), enum_t_value);
}
inline bool BuiltinClock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuiltinClock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuiltinClock>(
    BuiltinClock_descriptor(), name, value);
}
// ===================================================================

class ProcessDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.ProcessDescriptor) */ {
 public:
  inline ProcessDescriptor() : ProcessDescriptor(nullptr) {}
  ~ProcessDescriptor() override;
  explicit PROTOBUF_CONSTEXPR ProcessDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessDescriptor(const ProcessDescriptor& from);
  ProcessDescriptor(ProcessDescriptor&& from) noexcept
    : ProcessDescriptor() {
    *this = ::std::move(from);
  }

  inline ProcessDescriptor& operator=(const ProcessDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessDescriptor& operator=(ProcessDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessDescriptor* internal_default_instance() {
    return reinterpret_cast<const ProcessDescriptor*>(
               &_ProcessDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessDescriptor& a, ProcessDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.ProcessDescriptor";
  }
  protected:
  explicit ProcessDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 6,
    kPidFieldNumber = 1,
  };
  // optional string process_name = 6;
  bool has_process_name() const;
  private:
  bool _internal_has_process_name() const;
  public:
  void clear_process_name();
  const std::string& process_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_name();
  PROTOBUF_NODISCARD std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // optional int32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto_pruned.ProcessDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  int32_t pid_;
  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// -------------------------------------------------------------------

class TracePacketDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.TracePacketDefaults) */ {
 public:
  inline TracePacketDefaults() : TracePacketDefaults(nullptr) {}
  ~TracePacketDefaults() override;
  explicit PROTOBUF_CONSTEXPR TracePacketDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TracePacketDefaults(const TracePacketDefaults& from);
  TracePacketDefaults(TracePacketDefaults&& from) noexcept
    : TracePacketDefaults() {
    *this = ::std::move(from);
  }

  inline TracePacketDefaults& operator=(const TracePacketDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracePacketDefaults& operator=(TracePacketDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TracePacketDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const TracePacketDefaults* internal_default_instance() {
    return reinterpret_cast<const TracePacketDefaults*>(
               &_TracePacketDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TracePacketDefaults& a, TracePacketDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(TracePacketDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracePacketDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracePacketDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracePacketDefaults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TracePacketDefaults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TracePacketDefaults& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracePacketDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.TracePacketDefaults";
  }
  protected:
  explicit TracePacketDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampClockIdFieldNumber = 58,
  };
  // optional uint32 timestamp_clock_id = 58;
  bool has_timestamp_clock_id() const;
  private:
  bool _internal_has_timestamp_clock_id() const;
  public:
  void clear_timestamp_clock_id();
  uint32_t timestamp_clock_id() const;
  void set_timestamp_clock_id(uint32_t value);
  private:
  uint32_t _internal_timestamp_clock_id() const;
  void _internal_set_timestamp_clock_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto_pruned.TracePacketDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t timestamp_clock_id_;
  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// -------------------------------------------------------------------

class ThreadDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.ThreadDescriptor) */ {
 public:
  inline ThreadDescriptor() : ThreadDescriptor(nullptr) {}
  ~ThreadDescriptor() override;
  explicit PROTOBUF_CONSTEXPR ThreadDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadDescriptor(const ThreadDescriptor& from);
  ThreadDescriptor(ThreadDescriptor&& from) noexcept
    : ThreadDescriptor() {
    *this = ::std::move(from);
  }

  inline ThreadDescriptor& operator=(const ThreadDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadDescriptor& operator=(ThreadDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadDescriptor* internal_default_instance() {
    return reinterpret_cast<const ThreadDescriptor*>(
               &_ThreadDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThreadDescriptor& a, ThreadDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThreadDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.ThreadDescriptor";
  }
  protected:
  explicit ThreadDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
  };
  // optional int32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // optional int32 tid = 2;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto_pruned.ThreadDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t pid_;
  int32_t tid_;
  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// -------------------------------------------------------------------

class TrackDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.TrackDescriptor) */ {
 public:
  inline TrackDescriptor() : TrackDescriptor(nullptr) {}
  ~TrackDescriptor() override;
  explicit PROTOBUF_CONSTEXPR TrackDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackDescriptor(const TrackDescriptor& from);
  TrackDescriptor(TrackDescriptor&& from) noexcept
    : TrackDescriptor() {
    *this = ::std::move(from);
  }

  inline TrackDescriptor& operator=(const TrackDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackDescriptor& operator=(TrackDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackDescriptor* internal_default_instance() {
    return reinterpret_cast<const TrackDescriptor*>(
               &_TrackDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackDescriptor& a, TrackDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrackDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.TrackDescriptor";
  }
  protected:
  explicit TrackDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kProcessFieldNumber = 3,
    kThreadFieldNumber = 4,
    kUuidFieldNumber = 1,
    kParentUuidFieldNumber = 5,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .perfetto_pruned.ProcessDescriptor process = 3;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::perfetto_pruned::ProcessDescriptor& process() const;
  PROTOBUF_NODISCARD ::perfetto_pruned::ProcessDescriptor* release_process();
  ::perfetto_pruned::ProcessDescriptor* mutable_process();
  void set_allocated_process(::perfetto_pruned::ProcessDescriptor* process);
  private:
  const ::perfetto_pruned::ProcessDescriptor& _internal_process() const;
  ::perfetto_pruned::ProcessDescriptor* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::perfetto_pruned::ProcessDescriptor* process);
  ::perfetto_pruned::ProcessDescriptor* unsafe_arena_release_process();

  // optional .perfetto_pruned.ThreadDescriptor thread = 4;
  bool has_thread() const;
  private:
  bool _internal_has_thread() const;
  public:
  void clear_thread();
  const ::perfetto_pruned::ThreadDescriptor& thread() const;
  PROTOBUF_NODISCARD ::perfetto_pruned::ThreadDescriptor* release_thread();
  ::perfetto_pruned::ThreadDescriptor* mutable_thread();
  void set_allocated_thread(::perfetto_pruned::ThreadDescriptor* thread);
  private:
  const ::perfetto_pruned::ThreadDescriptor& _internal_thread() const;
  ::perfetto_pruned::ThreadDescriptor* _internal_mutable_thread();
  public:
  void unsafe_arena_set_allocated_thread(
      ::perfetto_pruned::ThreadDescriptor* thread);
  ::perfetto_pruned::ThreadDescriptor* unsafe_arena_release_thread();

  // optional uint64 uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  uint64_t uuid() const;
  void set_uuid(uint64_t value);
  private:
  uint64_t _internal_uuid() const;
  void _internal_set_uuid(uint64_t value);
  public:

  // optional uint64 parent_uuid = 5;
  bool has_parent_uuid() const;
  private:
  bool _internal_has_parent_uuid() const;
  public:
  void clear_parent_uuid();
  uint64_t parent_uuid() const;
  void set_parent_uuid(uint64_t value);
  private:
  uint64_t _internal_parent_uuid() const;
  void _internal_set_parent_uuid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto_pruned.TrackDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::perfetto_pruned::ProcessDescriptor* process_;
  ::perfetto_pruned::ThreadDescriptor* thread_;
  uint64_t uuid_;
  uint64_t parent_uuid_;
  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// -------------------------------------------------------------------

class TrackEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.TrackEvent) */ {
 public:
  inline TrackEvent() : TrackEvent(nullptr) {}
  ~TrackEvent() override;
  explicit PROTOBUF_CONSTEXPR TrackEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackEvent(const TrackEvent& from);
  TrackEvent(TrackEvent&& from) noexcept
    : TrackEvent() {
    *this = ::std::move(from);
  }

  inline TrackEvent& operator=(const TrackEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEvent& operator=(TrackEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackEvent& default_instance() {
    return *internal_default_instance();
  }
  enum NameFieldCase {
    kName = 23,
    NAME_FIELD_NOT_SET = 0,
  };

  static inline const TrackEvent* internal_default_instance() {
    return reinterpret_cast<const TrackEvent*>(
               &_TrackEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrackEvent& a, TrackEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrackEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.TrackEvent";
  }
  protected:
  explicit TrackEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrackEvent_Type Type;
  static constexpr Type TYPE_SLICE_BEGIN =
    TrackEvent_Type_TYPE_SLICE_BEGIN;
  static constexpr Type TYPE_SLICE_END =
    TrackEvent_Type_TYPE_SLICE_END;
  static inline bool Type_IsValid(int value) {
    return TrackEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TrackEvent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TrackEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TrackEvent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TrackEvent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TrackEvent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TrackEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrackUuidFieldNumber = 11,
    kTypeFieldNumber = 9,
    kNameFieldNumber = 23,
  };
  // optional uint64 track_uuid = 11;
  bool has_track_uuid() const;
  private:
  bool _internal_has_track_uuid() const;
  public:
  void clear_track_uuid();
  uint64_t track_uuid() const;
  void set_track_uuid(uint64_t value);
  private:
  uint64_t _internal_track_uuid() const;
  void _internal_set_track_uuid(uint64_t value);
  public:

  // optional .perfetto_pruned.TrackEvent.Type type = 9;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::perfetto_pruned::TrackEvent_Type type() const;
  void set_type(::perfetto_pruned::TrackEvent_Type value);
  private:
  ::perfetto_pruned::TrackEvent_Type _internal_type() const;
  void _internal_set_type(::perfetto_pruned::TrackEvent_Type value);
  public:

  // string name = 23;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_name_field();
  NameFieldCase name_field_case() const;
  // @@protoc_insertion_point(class_scope:perfetto_pruned.TrackEvent)
 private:
  class _Internal;
  void set_has_name();

  inline bool has_name_field() const;
  inline void clear_has_name_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t track_uuid_;
  int type_;
  union NameFieldUnion {
    constexpr NameFieldUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } name_field_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// -------------------------------------------------------------------

class TracePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.TracePacket) */ {
 public:
  inline TracePacket() : TracePacket(nullptr) {}
  ~TracePacket() override;
  explicit PROTOBUF_CONSTEXPR TracePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TracePacket(const TracePacket& from);
  TracePacket(TracePacket&& from) noexcept
    : TracePacket() {
    *this = ::std::move(from);
  }

  inline TracePacket& operator=(const TracePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracePacket& operator=(TracePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TracePacket& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kTrackEvent = 11,
    kTrackDescriptor = 60,
    DATA_NOT_SET = 0,
  };

  enum OptionalTrustedPacketSequenceIdCase {
    kTrustedPacketSequenceId = 10,
    OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET = 0,
  };

  static inline const TracePacket* internal_default_instance() {
    return reinterpret_cast<const TracePacket*>(
               &_TracePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TracePacket& a, TracePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TracePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TracePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TracePacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.TracePacket";
  }
  protected:
  explicit TracePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracePacketDefaultsFieldNumber = 59,
    kTimestampFieldNumber = 8,
    kPreviousPacketDroppedFieldNumber = 42,
    kTrackEventFieldNumber = 11,
    kTrackDescriptorFieldNumber = 60,
    kTrustedPacketSequenceIdFieldNumber = 10,
  };
  // required .perfetto_pruned.TracePacketDefaults trace_packet_defaults = 59;
  bool has_trace_packet_defaults() const;
  private:
  bool _internal_has_trace_packet_defaults() const;
  public:
  void clear_trace_packet_defaults();
  const ::perfetto_pruned::TracePacketDefaults& trace_packet_defaults() const;
  PROTOBUF_NODISCARD ::perfetto_pruned::TracePacketDefaults* release_trace_packet_defaults();
  ::perfetto_pruned::TracePacketDefaults* mutable_trace_packet_defaults();
  void set_allocated_trace_packet_defaults(::perfetto_pruned::TracePacketDefaults* trace_packet_defaults);
  private:
  const ::perfetto_pruned::TracePacketDefaults& _internal_trace_packet_defaults() const;
  ::perfetto_pruned::TracePacketDefaults* _internal_mutable_trace_packet_defaults();
  public:
  void unsafe_arena_set_allocated_trace_packet_defaults(
      ::perfetto_pruned::TracePacketDefaults* trace_packet_defaults);
  ::perfetto_pruned::TracePacketDefaults* unsafe_arena_release_trace_packet_defaults();

  // optional uint64 timestamp = 8;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional bool previous_packet_dropped = 42;
  bool has_previous_packet_dropped() const;
  private:
  bool _internal_has_previous_packet_dropped() const;
  public:
  void clear_previous_packet_dropped();
  bool previous_packet_dropped() const;
  void set_previous_packet_dropped(bool value);
  private:
  bool _internal_previous_packet_dropped() const;
  void _internal_set_previous_packet_dropped(bool value);
  public:

  // .perfetto_pruned.TrackEvent track_event = 11;
  bool has_track_event() const;
  private:
  bool _internal_has_track_event() const;
  public:
  void clear_track_event();
  const ::perfetto_pruned::TrackEvent& track_event() const;
  PROTOBUF_NODISCARD ::perfetto_pruned::TrackEvent* release_track_event();
  ::perfetto_pruned::TrackEvent* mutable_track_event();
  void set_allocated_track_event(::perfetto_pruned::TrackEvent* track_event);
  private:
  const ::perfetto_pruned::TrackEvent& _internal_track_event() const;
  ::perfetto_pruned::TrackEvent* _internal_mutable_track_event();
  public:
  void unsafe_arena_set_allocated_track_event(
      ::perfetto_pruned::TrackEvent* track_event);
  ::perfetto_pruned::TrackEvent* unsafe_arena_release_track_event();

  // .perfetto_pruned.TrackDescriptor track_descriptor = 60;
  bool has_track_descriptor() const;
  private:
  bool _internal_has_track_descriptor() const;
  public:
  void clear_track_descriptor();
  const ::perfetto_pruned::TrackDescriptor& track_descriptor() const;
  PROTOBUF_NODISCARD ::perfetto_pruned::TrackDescriptor* release_track_descriptor();
  ::perfetto_pruned::TrackDescriptor* mutable_track_descriptor();
  void set_allocated_track_descriptor(::perfetto_pruned::TrackDescriptor* track_descriptor);
  private:
  const ::perfetto_pruned::TrackDescriptor& _internal_track_descriptor() const;
  ::perfetto_pruned::TrackDescriptor* _internal_mutable_track_descriptor();
  public:
  void unsafe_arena_set_allocated_track_descriptor(
      ::perfetto_pruned::TrackDescriptor* track_descriptor);
  ::perfetto_pruned::TrackDescriptor* unsafe_arena_release_track_descriptor();

  // uint32 trusted_packet_sequence_id = 10;
  bool has_trusted_packet_sequence_id() const;
  private:
  bool _internal_has_trusted_packet_sequence_id() const;
  public:
  void clear_trusted_packet_sequence_id();
  uint32_t trusted_packet_sequence_id() const;
  void set_trusted_packet_sequence_id(uint32_t value);
  private:
  uint32_t _internal_trusted_packet_sequence_id() const;
  void _internal_set_trusted_packet_sequence_id(uint32_t value);
  public:

  void clear_data();
  DataCase data_case() const;
  void clear_optional_trusted_packet_sequence_id();
  OptionalTrustedPacketSequenceIdCase optional_trusted_packet_sequence_id_case() const;
  // @@protoc_insertion_point(class_scope:perfetto_pruned.TracePacket)
 private:
  class _Internal;
  void set_has_track_event();
  void set_has_track_descriptor();
  void set_has_trusted_packet_sequence_id();

  inline bool has_data() const;
  inline void clear_has_data();

  inline bool has_optional_trusted_packet_sequence_id() const;
  inline void clear_has_optional_trusted_packet_sequence_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto_pruned::TracePacketDefaults* trace_packet_defaults_;
  uint64_t timestamp_;
  bool previous_packet_dropped_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::perfetto_pruned::TrackEvent* track_event_;
    ::perfetto_pruned::TrackDescriptor* track_descriptor_;
  } data_;
  union OptionalTrustedPacketSequenceIdUnion {
    constexpr OptionalTrustedPacketSequenceIdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t trusted_packet_sequence_id_;
  } optional_trusted_packet_sequence_id_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// -------------------------------------------------------------------

class Trace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto_pruned.Trace) */ {
 public:
  inline Trace() : Trace(nullptr) {}
  ~Trace() override;
  explicit PROTOBUF_CONSTEXPR Trace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trace(const Trace& from);
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trace& operator=(Trace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }
  inline void Swap(Trace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Trace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Trace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto_pruned.Trace";
  }
  protected:
  explicit Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFieldNumber = 1,
  };
  // repeated .perfetto_pruned.TracePacket packet = 1;
  int packet_size() const;
  private:
  int _internal_packet_size() const;
  public:
  void clear_packet();
  ::perfetto_pruned::TracePacket* mutable_packet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto_pruned::TracePacket >*
      mutable_packet();
  private:
  const ::perfetto_pruned::TracePacket& _internal_packet(int index) const;
  ::perfetto_pruned::TracePacket* _internal_add_packet();
  public:
  const ::perfetto_pruned::TracePacket& packet(int index) const;
  ::perfetto_pruned::TracePacket* add_packet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto_pruned::TracePacket >&
      packet() const;

  // @@protoc_insertion_point(class_scope:perfetto_pruned.Trace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto_pruned::TracePacket > packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfetto_5fprunned_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessDescriptor

// optional int32 pid = 1;
inline bool ProcessDescriptor::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProcessDescriptor::has_pid() const {
  return _internal_has_pid();
}
inline void ProcessDescriptor::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ProcessDescriptor::_internal_pid() const {
  return pid_;
}
inline int32_t ProcessDescriptor::pid() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.ProcessDescriptor.pid)
  return _internal_pid();
}
inline void ProcessDescriptor::_internal_set_pid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
}
inline void ProcessDescriptor::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.ProcessDescriptor.pid)
}

// optional string process_name = 6;
inline bool ProcessDescriptor::_internal_has_process_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessDescriptor::has_process_name() const {
  return _internal_has_process_name();
}
inline void ProcessDescriptor::clear_process_name() {
  process_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessDescriptor::process_name() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.ProcessDescriptor.process_name)
  return _internal_process_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessDescriptor::set_process_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 process_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto_pruned.ProcessDescriptor.process_name)
}
inline std::string* ProcessDescriptor::mutable_process_name() {
  std::string* _s = _internal_mutable_process_name();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.ProcessDescriptor.process_name)
  return _s;
}
inline const std::string& ProcessDescriptor::_internal_process_name() const {
  return process_name_.Get();
}
inline void ProcessDescriptor::_internal_set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessDescriptor::_internal_mutable_process_name() {
  _has_bits_[0] |= 0x00000001u;
  return process_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessDescriptor::release_process_name() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.ProcessDescriptor.process_name)
  if (!_internal_has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = process_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (process_name_.IsDefault()) {
    process_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProcessDescriptor::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_name_.SetAllocated(process_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (process_name_.IsDefault()) {
    process_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.ProcessDescriptor.process_name)
}

// -------------------------------------------------------------------

// TracePacketDefaults

// optional uint32 timestamp_clock_id = 58;
inline bool TracePacketDefaults::_internal_has_timestamp_clock_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TracePacketDefaults::has_timestamp_clock_id() const {
  return _internal_has_timestamp_clock_id();
}
inline void TracePacketDefaults::clear_timestamp_clock_id() {
  timestamp_clock_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t TracePacketDefaults::_internal_timestamp_clock_id() const {
  return timestamp_clock_id_;
}
inline uint32_t TracePacketDefaults::timestamp_clock_id() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacketDefaults.timestamp_clock_id)
  return _internal_timestamp_clock_id();
}
inline void TracePacketDefaults::_internal_set_timestamp_clock_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_clock_id_ = value;
}
inline void TracePacketDefaults::set_timestamp_clock_id(uint32_t value) {
  _internal_set_timestamp_clock_id(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TracePacketDefaults.timestamp_clock_id)
}

// -------------------------------------------------------------------

// ThreadDescriptor

// optional int32 pid = 1;
inline bool ThreadDescriptor::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThreadDescriptor::has_pid() const {
  return _internal_has_pid();
}
inline void ThreadDescriptor::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ThreadDescriptor::_internal_pid() const {
  return pid_;
}
inline int32_t ThreadDescriptor::pid() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.ThreadDescriptor.pid)
  return _internal_pid();
}
inline void ThreadDescriptor::_internal_set_pid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
}
inline void ThreadDescriptor::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.ThreadDescriptor.pid)
}

// optional int32 tid = 2;
inline bool ThreadDescriptor::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThreadDescriptor::has_tid() const {
  return _internal_has_tid();
}
inline void ThreadDescriptor::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ThreadDescriptor::_internal_tid() const {
  return tid_;
}
inline int32_t ThreadDescriptor::tid() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.ThreadDescriptor.tid)
  return _internal_tid();
}
inline void ThreadDescriptor::_internal_set_tid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tid_ = value;
}
inline void ThreadDescriptor::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.ThreadDescriptor.tid)
}

// -------------------------------------------------------------------

// TrackDescriptor

// optional uint64 uuid = 1;
inline bool TrackDescriptor::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackDescriptor::has_uuid() const {
  return _internal_has_uuid();
}
inline void TrackDescriptor::clear_uuid() {
  uuid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t TrackDescriptor::_internal_uuid() const {
  return uuid_;
}
inline uint64_t TrackDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackDescriptor.uuid)
  return _internal_uuid();
}
inline void TrackDescriptor::_internal_set_uuid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  uuid_ = value;
}
inline void TrackDescriptor::set_uuid(uint64_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TrackDescriptor.uuid)
}

// optional uint64 parent_uuid = 5;
inline bool TrackDescriptor::_internal_has_parent_uuid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackDescriptor::has_parent_uuid() const {
  return _internal_has_parent_uuid();
}
inline void TrackDescriptor::clear_parent_uuid() {
  parent_uuid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TrackDescriptor::_internal_parent_uuid() const {
  return parent_uuid_;
}
inline uint64_t TrackDescriptor::parent_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackDescriptor.parent_uuid)
  return _internal_parent_uuid();
}
inline void TrackDescriptor::_internal_set_parent_uuid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  parent_uuid_ = value;
}
inline void TrackDescriptor::set_parent_uuid(uint64_t value) {
  _internal_set_parent_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TrackDescriptor.parent_uuid)
}

// optional string name = 2;
inline bool TrackDescriptor::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackDescriptor::has_name() const {
  return _internal_has_name();
}
inline void TrackDescriptor::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackDescriptor::name() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackDescriptor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrackDescriptor::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto_pruned.TrackDescriptor.name)
}
inline std::string* TrackDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TrackDescriptor.name)
  return _s;
}
inline const std::string& TrackDescriptor::_internal_name() const {
  return name_.Get();
}
inline void TrackDescriptor::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackDescriptor::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* TrackDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TrackDescriptor.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrackDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TrackDescriptor.name)
}

// optional .perfetto_pruned.ProcessDescriptor process = 3;
inline bool TrackDescriptor::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || process_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_process() const {
  return _internal_has_process();
}
inline void TrackDescriptor::clear_process() {
  if (process_ != nullptr) process_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto_pruned::ProcessDescriptor& TrackDescriptor::_internal_process() const {
  const ::perfetto_pruned::ProcessDescriptor* p = process_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto_pruned::ProcessDescriptor&>(
      ::perfetto_pruned::_ProcessDescriptor_default_instance_);
}
inline const ::perfetto_pruned::ProcessDescriptor& TrackDescriptor::process() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackDescriptor.process)
  return _internal_process();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_process(
    ::perfetto_pruned::ProcessDescriptor* process) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  process_ = process;
  if (process) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto_pruned.TrackDescriptor.process)
}
inline ::perfetto_pruned::ProcessDescriptor* TrackDescriptor::release_process() {
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto_pruned::ProcessDescriptor* temp = process_;
  process_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto_pruned::ProcessDescriptor* TrackDescriptor::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TrackDescriptor.process)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto_pruned::ProcessDescriptor* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::perfetto_pruned::ProcessDescriptor* TrackDescriptor::_internal_mutable_process() {
  _has_bits_[0] |= 0x00000002u;
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto_pruned::ProcessDescriptor>(GetArenaForAllocation());
    process_ = p;
  }
  return process_;
}
inline ::perfetto_pruned::ProcessDescriptor* TrackDescriptor::mutable_process() {
  ::perfetto_pruned::ProcessDescriptor* _msg = _internal_mutable_process();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TrackDescriptor.process)
  return _msg;
}
inline void TrackDescriptor::set_allocated_process(::perfetto_pruned::ProcessDescriptor* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process);
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TrackDescriptor.process)
}

// optional .perfetto_pruned.ThreadDescriptor thread = 4;
inline bool TrackDescriptor::_internal_has_thread() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || thread_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_thread() const {
  return _internal_has_thread();
}
inline void TrackDescriptor::clear_thread() {
  if (thread_ != nullptr) thread_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto_pruned::ThreadDescriptor& TrackDescriptor::_internal_thread() const {
  const ::perfetto_pruned::ThreadDescriptor* p = thread_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto_pruned::ThreadDescriptor&>(
      ::perfetto_pruned::_ThreadDescriptor_default_instance_);
}
inline const ::perfetto_pruned::ThreadDescriptor& TrackDescriptor::thread() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackDescriptor.thread)
  return _internal_thread();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_thread(
    ::perfetto_pruned::ThreadDescriptor* thread) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_);
  }
  thread_ = thread;
  if (thread) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto_pruned.TrackDescriptor.thread)
}
inline ::perfetto_pruned::ThreadDescriptor* TrackDescriptor::release_thread() {
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto_pruned::ThreadDescriptor* temp = thread_;
  thread_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto_pruned::ThreadDescriptor* TrackDescriptor::unsafe_arena_release_thread() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TrackDescriptor.thread)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto_pruned::ThreadDescriptor* temp = thread_;
  thread_ = nullptr;
  return temp;
}
inline ::perfetto_pruned::ThreadDescriptor* TrackDescriptor::_internal_mutable_thread() {
  _has_bits_[0] |= 0x00000004u;
  if (thread_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto_pruned::ThreadDescriptor>(GetArenaForAllocation());
    thread_ = p;
  }
  return thread_;
}
inline ::perfetto_pruned::ThreadDescriptor* TrackDescriptor::mutable_thread() {
  ::perfetto_pruned::ThreadDescriptor* _msg = _internal_mutable_thread();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TrackDescriptor.thread)
  return _msg;
}
inline void TrackDescriptor::set_allocated_thread(::perfetto_pruned::ThreadDescriptor* thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete thread_;
  }
  if (thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thread);
    if (message_arena != submessage_arena) {
      thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thread_ = thread;
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TrackDescriptor.thread)
}

// -------------------------------------------------------------------

// TrackEvent

// optional .perfetto_pruned.TrackEvent.Type type = 9;
inline bool TrackEvent::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackEvent::has_type() const {
  return _internal_has_type();
}
inline void TrackEvent::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto_pruned::TrackEvent_Type TrackEvent::_internal_type() const {
  return static_cast< ::perfetto_pruned::TrackEvent_Type >(type_);
}
inline ::perfetto_pruned::TrackEvent_Type TrackEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackEvent.type)
  return _internal_type();
}
inline void TrackEvent::_internal_set_type(::perfetto_pruned::TrackEvent_Type value) {
  assert(::perfetto_pruned::TrackEvent_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void TrackEvent::set_type(::perfetto_pruned::TrackEvent_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TrackEvent.type)
}

// optional uint64 track_uuid = 11;
inline bool TrackEvent::_internal_has_track_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackEvent::has_track_uuid() const {
  return _internal_has_track_uuid();
}
inline void TrackEvent::clear_track_uuid() {
  track_uuid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TrackEvent::_internal_track_uuid() const {
  return track_uuid_;
}
inline uint64_t TrackEvent::track_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackEvent.track_uuid)
  return _internal_track_uuid();
}
inline void TrackEvent::_internal_set_track_uuid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  track_uuid_ = value;
}
inline void TrackEvent::set_track_uuid(uint64_t value) {
  _internal_set_track_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TrackEvent.track_uuid)
}

// string name = 23;
inline bool TrackEvent::_internal_has_name() const {
  return name_field_case() == kName;
}
inline bool TrackEvent::has_name() const {
  return _internal_has_name();
}
inline void TrackEvent::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void TrackEvent::clear_name() {
  if (_internal_has_name()) {
    name_field_.name_.Destroy();
    clear_has_name_field();
  }
}
inline const std::string& TrackEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TrackEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void TrackEvent::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.InitDefault();
  }
  name_field_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto_pruned.TrackEvent.name)
}
inline std::string* TrackEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TrackEvent.name)
  return _s;
}
inline const std::string& TrackEvent::_internal_name() const {
  if (_internal_has_name()) {
    return name_field_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrackEvent::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.InitDefault();
  }
  name_field_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackEvent::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.InitDefault();
  }
  return name_field_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrackEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TrackEvent.name)
  if (_internal_has_name()) {
    clear_has_name_field();
    return name_field_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void TrackEvent::set_allocated_name(std::string* name) {
  if (has_name_field()) {
    clear_name_field();
  }
  if (name != nullptr) {
    set_has_name();
    name_field_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TrackEvent.name)
}

inline bool TrackEvent::has_name_field() const {
  return name_field_case() != NAME_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_name_field() {
  _oneof_case_[0] = NAME_FIELD_NOT_SET;
}
inline TrackEvent::NameFieldCase TrackEvent::name_field_case() const {
  return TrackEvent::NameFieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TracePacket

// optional uint64 timestamp = 8;
inline bool TracePacket::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TracePacket::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void TracePacket::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TracePacket::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t TracePacket::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacket.timestamp)
  return _internal_timestamp();
}
inline void TracePacket::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void TracePacket::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TracePacket.timestamp)
}

// .perfetto_pruned.TrackEvent track_event = 11;
inline bool TracePacket::_internal_has_track_event() const {
  return data_case() == kTrackEvent;
}
inline bool TracePacket::has_track_event() const {
  return _internal_has_track_event();
}
inline void TracePacket::set_has_track_event() {
  _oneof_case_[0] = kTrackEvent;
}
inline void TracePacket::clear_track_event() {
  if (_internal_has_track_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.track_event_;
    }
    clear_has_data();
  }
}
inline ::perfetto_pruned::TrackEvent* TracePacket::release_track_event() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TracePacket.track_event)
  if (_internal_has_track_event()) {
    clear_has_data();
    ::perfetto_pruned::TrackEvent* temp = data_.track_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto_pruned::TrackEvent& TracePacket::_internal_track_event() const {
  return _internal_has_track_event()
      ? *data_.track_event_
      : reinterpret_cast< ::perfetto_pruned::TrackEvent&>(::perfetto_pruned::_TrackEvent_default_instance_);
}
inline const ::perfetto_pruned::TrackEvent& TracePacket::track_event() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacket.track_event)
  return _internal_track_event();
}
inline ::perfetto_pruned::TrackEvent* TracePacket::unsafe_arena_release_track_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto_pruned.TracePacket.track_event)
  if (_internal_has_track_event()) {
    clear_has_data();
    ::perfetto_pruned::TrackEvent* temp = data_.track_event_;
    data_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_track_event(::perfetto_pruned::TrackEvent* track_event) {
  clear_data();
  if (track_event) {
    set_has_track_event();
    data_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto_pruned.TracePacket.track_event)
}
inline ::perfetto_pruned::TrackEvent* TracePacket::_internal_mutable_track_event() {
  if (!_internal_has_track_event()) {
    clear_data();
    set_has_track_event();
    data_.track_event_ = CreateMaybeMessage< ::perfetto_pruned::TrackEvent >(GetArenaForAllocation());
  }
  return data_.track_event_;
}
inline ::perfetto_pruned::TrackEvent* TracePacket::mutable_track_event() {
  ::perfetto_pruned::TrackEvent* _msg = _internal_mutable_track_event();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TracePacket.track_event)
  return _msg;
}

// .perfetto_pruned.TrackDescriptor track_descriptor = 60;
inline bool TracePacket::_internal_has_track_descriptor() const {
  return data_case() == kTrackDescriptor;
}
inline bool TracePacket::has_track_descriptor() const {
  return _internal_has_track_descriptor();
}
inline void TracePacket::set_has_track_descriptor() {
  _oneof_case_[0] = kTrackDescriptor;
}
inline void TracePacket::clear_track_descriptor() {
  if (_internal_has_track_descriptor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.track_descriptor_;
    }
    clear_has_data();
  }
}
inline ::perfetto_pruned::TrackDescriptor* TracePacket::release_track_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TracePacket.track_descriptor)
  if (_internal_has_track_descriptor()) {
    clear_has_data();
    ::perfetto_pruned::TrackDescriptor* temp = data_.track_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.track_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto_pruned::TrackDescriptor& TracePacket::_internal_track_descriptor() const {
  return _internal_has_track_descriptor()
      ? *data_.track_descriptor_
      : reinterpret_cast< ::perfetto_pruned::TrackDescriptor&>(::perfetto_pruned::_TrackDescriptor_default_instance_);
}
inline const ::perfetto_pruned::TrackDescriptor& TracePacket::track_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacket.track_descriptor)
  return _internal_track_descriptor();
}
inline ::perfetto_pruned::TrackDescriptor* TracePacket::unsafe_arena_release_track_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto_pruned.TracePacket.track_descriptor)
  if (_internal_has_track_descriptor()) {
    clear_has_data();
    ::perfetto_pruned::TrackDescriptor* temp = data_.track_descriptor_;
    data_.track_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_track_descriptor(::perfetto_pruned::TrackDescriptor* track_descriptor) {
  clear_data();
  if (track_descriptor) {
    set_has_track_descriptor();
    data_.track_descriptor_ = track_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto_pruned.TracePacket.track_descriptor)
}
inline ::perfetto_pruned::TrackDescriptor* TracePacket::_internal_mutable_track_descriptor() {
  if (!_internal_has_track_descriptor()) {
    clear_data();
    set_has_track_descriptor();
    data_.track_descriptor_ = CreateMaybeMessage< ::perfetto_pruned::TrackDescriptor >(GetArenaForAllocation());
  }
  return data_.track_descriptor_;
}
inline ::perfetto_pruned::TrackDescriptor* TracePacket::mutable_track_descriptor() {
  ::perfetto_pruned::TrackDescriptor* _msg = _internal_mutable_track_descriptor();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TracePacket.track_descriptor)
  return _msg;
}

// uint32 trusted_packet_sequence_id = 10;
inline bool TracePacket::_internal_has_trusted_packet_sequence_id() const {
  return optional_trusted_packet_sequence_id_case() == kTrustedPacketSequenceId;
}
inline bool TracePacket::has_trusted_packet_sequence_id() const {
  return _internal_has_trusted_packet_sequence_id();
}
inline void TracePacket::set_has_trusted_packet_sequence_id() {
  _oneof_case_[1] = kTrustedPacketSequenceId;
}
inline void TracePacket::clear_trusted_packet_sequence_id() {
  if (_internal_has_trusted_packet_sequence_id()) {
    optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_ = 0u;
    clear_has_optional_trusted_packet_sequence_id();
  }
}
inline uint32_t TracePacket::_internal_trusted_packet_sequence_id() const {
  if (_internal_has_trusted_packet_sequence_id()) {
    return optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_;
  }
  return 0u;
}
inline void TracePacket::_internal_set_trusted_packet_sequence_id(uint32_t value) {
  if (!_internal_has_trusted_packet_sequence_id()) {
    clear_optional_trusted_packet_sequence_id();
    set_has_trusted_packet_sequence_id();
  }
  optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_ = value;
}
inline uint32_t TracePacket::trusted_packet_sequence_id() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacket.trusted_packet_sequence_id)
  return _internal_trusted_packet_sequence_id();
}
inline void TracePacket::set_trusted_packet_sequence_id(uint32_t value) {
  _internal_set_trusted_packet_sequence_id(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TracePacket.trusted_packet_sequence_id)
}

// required .perfetto_pruned.TracePacketDefaults trace_packet_defaults = 59;
inline bool TracePacket::_internal_has_trace_packet_defaults() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || trace_packet_defaults_ != nullptr);
  return value;
}
inline bool TracePacket::has_trace_packet_defaults() const {
  return _internal_has_trace_packet_defaults();
}
inline void TracePacket::clear_trace_packet_defaults() {
  if (trace_packet_defaults_ != nullptr) trace_packet_defaults_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto_pruned::TracePacketDefaults& TracePacket::_internal_trace_packet_defaults() const {
  const ::perfetto_pruned::TracePacketDefaults* p = trace_packet_defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto_pruned::TracePacketDefaults&>(
      ::perfetto_pruned::_TracePacketDefaults_default_instance_);
}
inline const ::perfetto_pruned::TracePacketDefaults& TracePacket::trace_packet_defaults() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacket.trace_packet_defaults)
  return _internal_trace_packet_defaults();
}
inline void TracePacket::unsafe_arena_set_allocated_trace_packet_defaults(
    ::perfetto_pruned::TracePacketDefaults* trace_packet_defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_packet_defaults_);
  }
  trace_packet_defaults_ = trace_packet_defaults;
  if (trace_packet_defaults) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto_pruned.TracePacket.trace_packet_defaults)
}
inline ::perfetto_pruned::TracePacketDefaults* TracePacket::release_trace_packet_defaults() {
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto_pruned::TracePacketDefaults* temp = trace_packet_defaults_;
  trace_packet_defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto_pruned::TracePacketDefaults* TracePacket::unsafe_arena_release_trace_packet_defaults() {
  // @@protoc_insertion_point(field_release:perfetto_pruned.TracePacket.trace_packet_defaults)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto_pruned::TracePacketDefaults* temp = trace_packet_defaults_;
  trace_packet_defaults_ = nullptr;
  return temp;
}
inline ::perfetto_pruned::TracePacketDefaults* TracePacket::_internal_mutable_trace_packet_defaults() {
  _has_bits_[0] |= 0x00000001u;
  if (trace_packet_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto_pruned::TracePacketDefaults>(GetArenaForAllocation());
    trace_packet_defaults_ = p;
  }
  return trace_packet_defaults_;
}
inline ::perfetto_pruned::TracePacketDefaults* TracePacket::mutable_trace_packet_defaults() {
  ::perfetto_pruned::TracePacketDefaults* _msg = _internal_mutable_trace_packet_defaults();
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.TracePacket.trace_packet_defaults)
  return _msg;
}
inline void TracePacket::set_allocated_trace_packet_defaults(::perfetto_pruned::TracePacketDefaults* trace_packet_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trace_packet_defaults_;
  }
  if (trace_packet_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trace_packet_defaults);
    if (message_arena != submessage_arena) {
      trace_packet_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_packet_defaults, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_packet_defaults_ = trace_packet_defaults;
  // @@protoc_insertion_point(field_set_allocated:perfetto_pruned.TracePacket.trace_packet_defaults)
}

// optional bool previous_packet_dropped = 42;
inline bool TracePacket::_internal_has_previous_packet_dropped() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TracePacket::has_previous_packet_dropped() const {
  return _internal_has_previous_packet_dropped();
}
inline void TracePacket::clear_previous_packet_dropped() {
  previous_packet_dropped_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TracePacket::_internal_previous_packet_dropped() const {
  return previous_packet_dropped_;
}
inline bool TracePacket::previous_packet_dropped() const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.TracePacket.previous_packet_dropped)
  return _internal_previous_packet_dropped();
}
inline void TracePacket::_internal_set_previous_packet_dropped(bool value) {
  _has_bits_[0] |= 0x00000004u;
  previous_packet_dropped_ = value;
}
inline void TracePacket::set_previous_packet_dropped(bool value) {
  _internal_set_previous_packet_dropped(value);
  // @@protoc_insertion_point(field_set:perfetto_pruned.TracePacket.previous_packet_dropped)
}

inline bool TracePacket::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TracePacket::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline bool TracePacket::has_optional_trusted_packet_sequence_id() const {
  return optional_trusted_packet_sequence_id_case() != OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}
inline void TracePacket::clear_has_optional_trusted_packet_sequence_id() {
  _oneof_case_[1] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}
inline TracePacket::DataCase TracePacket::data_case() const {
  return TracePacket::DataCase(_oneof_case_[0]);
}
inline TracePacket::OptionalTrustedPacketSequenceIdCase TracePacket::optional_trusted_packet_sequence_id_case() const {
  return TracePacket::OptionalTrustedPacketSequenceIdCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Trace

// repeated .perfetto_pruned.TracePacket packet = 1;
inline int Trace::_internal_packet_size() const {
  return packet_.size();
}
inline int Trace::packet_size() const {
  return _internal_packet_size();
}
inline void Trace::clear_packet() {
  packet_.Clear();
}
inline ::perfetto_pruned::TracePacket* Trace::mutable_packet(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto_pruned.Trace.packet)
  return packet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto_pruned::TracePacket >*
Trace::mutable_packet() {
  // @@protoc_insertion_point(field_mutable_list:perfetto_pruned.Trace.packet)
  return &packet_;
}
inline const ::perfetto_pruned::TracePacket& Trace::_internal_packet(int index) const {
  return packet_.Get(index);
}
inline const ::perfetto_pruned::TracePacket& Trace::packet(int index) const {
  // @@protoc_insertion_point(field_get:perfetto_pruned.Trace.packet)
  return _internal_packet(index);
}
inline ::perfetto_pruned::TracePacket* Trace::_internal_add_packet() {
  return packet_.Add();
}
inline ::perfetto_pruned::TracePacket* Trace::add_packet() {
  ::perfetto_pruned::TracePacket* _add = _internal_add_packet();
  // @@protoc_insertion_point(field_add:perfetto_pruned.Trace.packet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto_pruned::TracePacket >&
Trace::packet() const {
  // @@protoc_insertion_point(field_list:perfetto_pruned.Trace.packet)
  return packet_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perfetto_pruned

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto_pruned::TrackEvent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perfetto_pruned::TrackEvent_Type>() {
  return ::perfetto_pruned::TrackEvent_Type_descriptor();
}
template <> struct is_proto_enum< ::perfetto_pruned::BuiltinClock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perfetto_pruned::BuiltinClock>() {
  return ::perfetto_pruned::BuiltinClock_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perfetto_5fprunned_2eproto
